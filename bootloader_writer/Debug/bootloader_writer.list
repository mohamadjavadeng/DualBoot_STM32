
bootloader_writer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f2c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080040b4  080040b4  000050b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800412c  0800412c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004134  08004134  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004134  08004134  00005134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004138  08004138  00005138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800413c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000004e4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b1d5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e35  00000000  00000000  00011211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a10  00000000  00000000  00013048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007ba  00000000  00000000  00013a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020732  00000000  00000000  00014212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c049  00000000  00000000  00034944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c490a  00000000  00000000  0004098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00105297  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000028e0  00000000  00000000  001052dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00107bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800409c 	.word	0x0800409c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800409c 	.word	0x0800409c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <W25Q_Delay>:

#define numBLOCK 32 // number of totoal 16MB flash


void W25Q_Delay(uint32_t time)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	HAL_Delay(time);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f000 fe0b 	bl	80010dc <HAL_Delay>
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <csLOW>:

void csLOW (void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2110      	movs	r1, #16
 80004d8:	4802      	ldr	r0, [pc, #8]	@ (80004e4 <csLOW+0x14>)
 80004da:	f001 fb19 	bl	8001b10 <HAL_GPIO_WritePin>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	40020800 	.word	0x40020800

080004e8 <csHIGH>:

void csHIGH (void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2110      	movs	r1, #16
 80004f0:	4802      	ldr	r0, [pc, #8]	@ (80004fc <csHIGH+0x14>)
 80004f2:	f001 fb0d 	bl	8001b10 <HAL_GPIO_WritePin>
}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40020800 	.word	0x40020800

08000500 <SPI_Write>:

void SPI_Write (uint8_t *data, uint8_t len)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	460b      	mov	r3, r1
 800050a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(&W25Q_SPI, data, len, 2000);
 800050c:	78fb      	ldrb	r3, [r7, #3]
 800050e:	b29a      	uxth	r2, r3
 8000510:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000514:	6879      	ldr	r1, [r7, #4]
 8000516:	4803      	ldr	r0, [pc, #12]	@ (8000524 <SPI_Write+0x24>)
 8000518:	f001 fff5 	bl	8002506 <HAL_SPI_Transmit>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000028 	.word	0x20000028

08000528 <SPI_Read>:

void SPI_Read (uint8_t *data, uint32_t len)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	HAL_SPI_Receive(&W25Q_SPI, data, len, 5000);
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	b29a      	uxth	r2, r3
 8000536:	f241 3388 	movw	r3, #5000	@ 0x1388
 800053a:	6879      	ldr	r1, [r7, #4]
 800053c:	4803      	ldr	r0, [pc, #12]	@ (800054c <SPI_Read+0x24>)
 800053e:	f002 f926 	bl	800278e <HAL_SPI_Receive>
}
 8000542:	bf00      	nop
 8000544:	3708      	adds	r7, #8
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000028 	.word	0x20000028

08000550 <W25Q_Reset>:

/**************************************************************************************************/

void W25Q_Reset (void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
	uint8_t tData[2];
	tData[0] = 0x66;  // enable Reset
 8000556:	2366      	movs	r3, #102	@ 0x66
 8000558:	713b      	strb	r3, [r7, #4]
	tData[1] = 0x99;  // Reset
 800055a:	2399      	movs	r3, #153	@ 0x99
 800055c:	717b      	strb	r3, [r7, #5]
	csLOW();
 800055e:	f7ff ffb7 	bl	80004d0 <csLOW>
	SPI_Write(tData, 2);
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ffca 	bl	8000500 <SPI_Write>
	csHIGH();
 800056c:	f7ff ffbc 	bl	80004e8 <csHIGH>
	W25Q_Delay(100);
 8000570:	2064      	movs	r0, #100	@ 0x64
 8000572:	f7ff ffa1 	bl	80004b8 <W25Q_Delay>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}

0800057e <W25Q_FastRead>:
	SPI_Read(rData, size);  // Read the data
	csHIGH();  // pull the CS High
}

void W25Q_FastRead (uint32_t startPage, uint8_t offset, uint32_t size, uint8_t *rData)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	b088      	sub	sp, #32
 8000582:	af00      	add	r7, sp, #0
 8000584:	60f8      	str	r0, [r7, #12]
 8000586:	607a      	str	r2, [r7, #4]
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	460b      	mov	r3, r1
 800058c:	72fb      	strb	r3, [r7, #11]
	uint8_t tData[6];
	uint32_t memAddr = (startPage*256) + offset;
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	021a      	lsls	r2, r3, #8
 8000592:	7afb      	ldrb	r3, [r7, #11]
 8000594:	4413      	add	r3, r2
 8000596:	61fb      	str	r3, [r7, #28]

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x0B;  // enable Fast Read
 8000598:	230b      	movs	r3, #11
 800059a:	753b      	strb	r3, [r7, #20]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	0c1b      	lsrs	r3, r3, #16
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	757b      	strb	r3, [r7, #21]
		tData[2] = (memAddr>>8)&0xFF;
 80005a4:	69fb      	ldr	r3, [r7, #28]
 80005a6:	0a1b      	lsrs	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	75bb      	strb	r3, [r7, #22]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	75fb      	strb	r3, [r7, #23]
		tData[4] = 0;  // Dummy clock
 80005b2:	2300      	movs	r3, #0
 80005b4:	763b      	strb	r3, [r7, #24]
		tData[3] = (memAddr>>8)&0xFF;
		tData[4] = (memAddr)&0xFF; // LSB of the memory Address
		tData[5] = 0;  // Dummy clock
	}

	csLOW();  // pull the CS Low
 80005b6:	f7ff ff8b 	bl	80004d0 <csLOW>
	if (numBLOCK<512)
	{
		SPI_Write(tData, 5);  // send read instruction along with the 24 bit memory address
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2105      	movs	r1, #5
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff9d 	bl	8000500 <SPI_Write>
	else
	{
		SPI_Write(tData, 6);  // send read instruction along with the 32 bit memory address
	}

	SPI_Read(rData, size);  // Read the data
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	6838      	ldr	r0, [r7, #0]
 80005ca:	f7ff ffad 	bl	8000528 <SPI_Read>
	csHIGH();  // pull the CS High
 80005ce:	f7ff ff8b 	bl	80004e8 <csHIGH>
}
 80005d2:	bf00      	nop
 80005d4:	3720      	adds	r7, #32
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <write_enable>:

void write_enable (void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
	uint8_t tData = 0x06;  // enable write
 80005e0:	2306      	movs	r3, #6
 80005e2:	71fb      	strb	r3, [r7, #7]
	csLOW();
 80005e4:	f7ff ff74 	bl	80004d0 <csLOW>
	SPI_Write(&tData, 1);
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff ff87 	bl	8000500 <SPI_Write>
	csHIGH();
 80005f2:	f7ff ff79 	bl	80004e8 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 80005f6:	2005      	movs	r0, #5
 80005f8:	f7ff ff5e 	bl	80004b8 <W25Q_Delay>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <write_disable>:

void write_disable(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	uint8_t tData = 0x04;  // disable write
 800060a:	2304      	movs	r3, #4
 800060c:	71fb      	strb	r3, [r7, #7]
	csLOW();
 800060e:	f7ff ff5f 	bl	80004d0 <csLOW>
	SPI_Write(&tData, 1);
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ff72 	bl	8000500 <SPI_Write>
	csHIGH();
 800061c:	f7ff ff64 	bl	80004e8 <csHIGH>
	W25Q_Delay(5);  // 5ms delay
 8000620:	2005      	movs	r0, #5
 8000622:	f7ff ff49 	bl	80004b8 <W25Q_Delay>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <bytestowrite>:

uint32_t bytestowrite (uint32_t size, uint16_t offset)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	807b      	strh	r3, [r7, #2]
	if ((size+offset)<256) return size;
 800063a:	887a      	ldrh	r2, [r7, #2]
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	4413      	add	r3, r2
 8000640:	2bff      	cmp	r3, #255	@ 0xff
 8000642:	d801      	bhi.n	8000648 <bytestowrite+0x1a>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	e002      	b.n	800064e <bytestowrite+0x20>
	else return 256-offset;
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
}
 800064e:	4618      	mov	r0, r3
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <W25Q_Erase_Sector>:
	if ((size+offset)<4096) return size;
	else return 4096-offset;
}

void W25Q_Erase_Sector (uint16_t numsector)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b086      	sub	sp, #24
 800065e:	af00      	add	r7, sp, #0
 8000660:	4603      	mov	r3, r0
 8000662:	80fb      	strh	r3, [r7, #6]
	uint8_t tData[6];
	uint32_t memAddr = numsector*16*256;   // Each sector contains 16 pages * 256 bytes
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	031b      	lsls	r3, r3, #12
 8000668:	617b      	str	r3, [r7, #20]

	write_enable();
 800066a:	f7ff ffb6 	bl	80005da <write_enable>

	if (numBLOCK<512)   // Chip Size<256Mb
	{
		tData[0] = 0x20;  // Erase sector
 800066e:	2320      	movs	r3, #32
 8000670:	733b      	strb	r3, [r7, #12]
		tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	b2db      	uxtb	r3, r3
 8000678:	737b      	strb	r3, [r7, #13]
		tData[2] = (memAddr>>8)&0xFF;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	b2db      	uxtb	r3, r3
 8000680:	73bb      	strb	r3, [r7, #14]
		tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	73fb      	strb	r3, [r7, #15]

		csLOW();
 8000688:	f7ff ff22 	bl	80004d0 <csLOW>
		SPI_Write(tData, 4);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	2104      	movs	r1, #4
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff34 	bl	8000500 <SPI_Write>
		csHIGH();
 8000698:	f7ff ff26 	bl	80004e8 <csHIGH>
		csLOW();  // pull the CS LOW
		SPI_Write(tData, 5);
		csHIGH();  // pull the HIGH
	}

	W25Q_Delay(100);  // 450ms delay for sector erase
 800069c:	2064      	movs	r0, #100	@ 0x64
 800069e:	f7ff ff0b 	bl	80004b8 <W25Q_Delay>

	write_disable();
 80006a2:	f7ff ffaf 	bl	8000604 <write_disable>

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <W25Q_Write_Page>:
	}
}


void W25Q_Write_Page (uint32_t page, uint16_t offset, uint32_t size, uint8_t *data)
{
 80006ae:	b590      	push	{r4, r7, lr}
 80006b0:	b0d1      	sub	sp, #324	@ 0x144
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 80006b8:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 80006bc:	6020      	str	r0, [r4, #0]
 80006be:	4608      	mov	r0, r1
 80006c0:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80006c4:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 80006c8:	600a      	str	r2, [r1, #0]
 80006ca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80006ce:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006d8:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80006dc:	4602      	mov	r2, r0
 80006de:	801a      	strh	r2, [r3, #0]
	uint8_t tData[266];
	uint32_t startPage = page;
 80006e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006e4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
	uint32_t endPage  = startPage + ((size+offset-1)/256);
 80006ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006f2:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80006f6:	881a      	ldrh	r2, [r3, #0]
 80006f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80006fc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4413      	add	r3, r2
 8000704:	3b01      	subs	r3, #1
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800070c:	4413      	add	r3, r2
 800070e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	uint32_t numPages = endPage-startPage+1;
 8000712:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8000716:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	3301      	adds	r3, #1
 800071e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	/*for (uint16_t i=0; i<numSectors; i++)
	{
		W25Q_Erase_Sector(startSector++);
	}
*/
	uint32_t dataPosition = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

	// write the data
	for (uint32_t i=0; i<numPages; i++)
 8000728:	2300      	movs	r3, #0
 800072a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 800072e:	e0bc      	b.n	80008aa <W25Q_Write_Page+0x1fc>
	{
		uint32_t memAddr = (startPage*256)+offset;
 8000730:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000734:	021a      	lsls	r2, r3, #8
 8000736:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800073a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	4413      	add	r3, r2
 8000742:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
		uint16_t bytesremaining  = bytestowrite(size, offset);
 8000746:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800074a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000754:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000758:	4611      	mov	r1, r2
 800075a:	6818      	ldr	r0, [r3, #0]
 800075c:	f7ff ff67 	bl	800062e <bytestowrite>
 8000760:	4603      	mov	r3, r0
 8000762:	f8a7 311e 	strh.w	r3, [r7, #286]	@ 0x11e
		uint32_t indx = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

		write_enable();
 800076c:	f7ff ff35 	bl	80005da <write_enable>

		if (numBLOCK<512)   // Chip Size<256Mb
		{
			tData[0] = 0x02;  // page program
 8000770:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000774:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8000778:	2202      	movs	r2, #2
 800077a:	701a      	strb	r2, [r3, #0]
			tData[1] = (memAddr>>16)&0xFF;  // MSB of the memory Address
 800077c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	b2da      	uxtb	r2, r3
 8000784:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000788:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800078c:	705a      	strb	r2, [r3, #1]
			tData[2] = (memAddr>>8)&0xFF;
 800078e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	b2da      	uxtb	r2, r3
 8000796:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800079a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800079e:	709a      	strb	r2, [r3, #2]
			tData[3] = (memAddr)&0xFF; // LSB of the memory Address
 80007a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80007aa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80007ae:	70da      	strb	r2, [r3, #3]

			indx = 4;
 80007b0:	2304      	movs	r3, #4
 80007b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
			tData[4] = (memAddr)&0xFF; // LSB of the memory Address

			indx = 5;
		}

		uint16_t bytestosend  = bytesremaining + indx;
 80007b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80007ba:	b29a      	uxth	r2, r3
 80007bc:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 80007c0:	4413      	add	r3, r2
 80007c2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

		for (uint16_t i=0; i<bytesremaining; i++)
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 80007cc:	e01a      	b.n	8000804 <W25Q_Write_Page+0x156>
		{
			tData[indx++] = data[i+dataPosition];
 80007ce:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 80007d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007d6:	4413      	add	r3, r2
 80007d8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80007dc:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 80007e0:	6812      	ldr	r2, [r2, #0]
 80007e2:	441a      	add	r2, r3
 80007e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80007e8:	1c59      	adds	r1, r3, #1
 80007ea:	f8c7 1130 	str.w	r1, [r7, #304]	@ 0x130
 80007ee:	7811      	ldrb	r1, [r2, #0]
 80007f0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80007f4:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80007f8:	54d1      	strb	r1, [r2, r3]
		for (uint16_t i=0; i<bytesremaining; i++)
 80007fa:	f8b7 312e 	ldrh.w	r3, [r7, #302]	@ 0x12e
 80007fe:	3301      	adds	r3, #1
 8000800:	f8a7 312e 	strh.w	r3, [r7, #302]	@ 0x12e
 8000804:	f8b7 212e 	ldrh.w	r2, [r7, #302]	@ 0x12e
 8000808:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800080c:	429a      	cmp	r2, r3
 800080e:	d3de      	bcc.n	80007ce <W25Q_Write_Page+0x120>
		}

		csLOW();
 8000810:	f7ff fe5e 	bl	80004d0 <csLOW>
		if (bytestosend > 200)
 8000814:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000818:	2bc8      	cmp	r3, #200	@ 0xc8
 800081a:	d912      	bls.n	8000842 <W25Q_Write_Page+0x194>
		{
			SPI_Write(tData, 100);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	2164      	movs	r1, #100	@ 0x64
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff fe6c 	bl	8000500 <SPI_Write>
			SPI_Write(tData+100, bytestosend-100);
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	3364      	adds	r3, #100	@ 0x64
 800082e:	f8b7 211c 	ldrh.w	r2, [r7, #284]	@ 0x11c
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	3a64      	subs	r2, #100	@ 0x64
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fe60 	bl	8000500 <SPI_Write>
 8000840:	e008      	b.n	8000854 <W25Q_Write_Page+0x1a6>
		}

		else
		{
			SPI_Write(tData, bytestosend);
 8000842:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8000846:	b2da      	uxtb	r2, r3
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4611      	mov	r1, r2
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fe56 	bl	8000500 <SPI_Write>
		}
		csHIGH();
 8000854:	f7ff fe48 	bl	80004e8 <csHIGH>
		startPage++;
 8000858:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800085c:	3301      	adds	r3, #1
 800085e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
		offset = 0;
 8000862:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000866:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800086a:	2200      	movs	r2, #0
 800086c:	801a      	strh	r2, [r3, #0]
		size = size-bytesremaining;
 800086e:	f8b7 211e 	ldrh.w	r2, [r7, #286]	@ 0x11e
 8000872:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000876:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800087a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800087e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8000882:	6809      	ldr	r1, [r1, #0]
 8000884:	1a8a      	subs	r2, r1, r2
 8000886:	601a      	str	r2, [r3, #0]
		dataPosition = dataPosition+bytesremaining;
 8000888:	f8b7 311e 	ldrh.w	r3, [r7, #286]	@ 0x11e
 800088c:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 8000890:	4413      	add	r3, r2
 8000892:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138

		W25Q_Delay(5);
 8000896:	2005      	movs	r0, #5
 8000898:	f7ff fe0e 	bl	80004b8 <W25Q_Delay>
		write_disable();
 800089c:	f7ff feb2 	bl	8000604 <write_disable>
	for (uint32_t i=0; i<numPages; i++)
 80008a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80008a4:	3301      	adds	r3, #1
 80008a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80008aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80008ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80008b2:	429a      	cmp	r2, r3
 80008b4:	f4ff af3c 	bcc.w	8000730 <W25Q_Write_Page+0x82>

	}
}
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd90      	pop	{r4, r7, pc}

080008c4 <WRITE_TO_FLASHW25Q>:
 * ***********************************************************
 * Function to Read program data from flash memory of STM32
 * and write it into the W25Q flash memory
 * ***********************************************************
 * */
void WRITE_TO_FLASHW25Q(uint32_t AppAddress, uint32_t W25QPageAddress, int32_t FirmwareSize){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	60f8      	str	r0, [r7, #12]
 80008cc:	60b9      	str	r1, [r7, #8]
 80008ce:	607a      	str	r2, [r7, #4]

	int32_t bytesremains = FirmwareSize;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t flashAddress = AppAddress;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	623b      	str	r3, [r7, #32]
	uint32_t pageAddress = W25QPageAddress;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	61fb      	str	r3, [r7, #28]
	uint32_t SectorOffset = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
	// Sector offset for storing firmwares
	if(AppAddress == FIRMWARE1_BASE_ADDR){
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	4a29      	ldr	r2, [pc, #164]	@ (8000988 <WRITE_TO_FLASHW25Q+0xc4>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d102      	bne.n	80008ee <WRITE_TO_FLASHW25Q+0x2a>
		SectorOffset = SECTOR_FIRMWARE1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	e005      	b.n	80008fa <WRITE_TO_FLASHW25Q+0x36>
	}
	else if(AppAddress == FIRMWARE2_BASE_ADDR){
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4a26      	ldr	r2, [pc, #152]	@ (800098c <WRITE_TO_FLASHW25Q+0xc8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d101      	bne.n	80008fa <WRITE_TO_FLASHW25Q+0x36>
		SectorOffset = SECTOR_FIRMWARE2;
 80008f6:	2380      	movs	r3, #128	@ 0x80
 80008f8:	61bb      	str	r3, [r7, #24]
	}

	// Erasing allocated sectors to the firmware
	for(uint32_t j=0; j < ALLOCATED_SECTOR; j++){
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	e00b      	b.n	8000918 <WRITE_TO_FLASHW25Q+0x54>
		W25Q_Erase_Sector(SectorOffset +j);
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	b29a      	uxth	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fea4 	bl	800065a <W25Q_Erase_Sector>
	for(uint32_t j=0; j < ALLOCATED_SECTOR; j++){
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b13      	cmp	r3, #19
 800091c:	d9f0      	bls.n	8000900 <WRITE_TO_FLASHW25Q+0x3c>
	}

	//Writing Flash program on W25Q
	while(bytesremains > 0){
 800091e:	e026      	b.n	800096e <WRITE_TO_FLASHW25Q+0xaa>
		HAL_FLASH_Unlock();
 8000920:	f000 fdf8 	bl	8001514 <HAL_FLASH_Unlock>
		for(uint32_t i=0; i < CHUNKSIZE; i++){
 8000924:	2300      	movs	r3, #0
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	e00d      	b.n	8000946 <WRITE_TO_FLASHW25Q+0x82>
			MCUFLASHREAD[i] = *(__IO uint8_t*)flashAddress; // Reading each address of flash and store it in an array
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b2d9      	uxtb	r1, r3
 8000930:	4a17      	ldr	r2, [pc, #92]	@ (8000990 <WRITE_TO_FLASHW25Q+0xcc>)
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	4413      	add	r3, r2
 8000936:	460a      	mov	r2, r1
 8000938:	701a      	strb	r2, [r3, #0]
			flashAddress++;
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	3301      	adds	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
		for(uint32_t i=0; i < CHUNKSIZE; i++){
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	3301      	adds	r3, #1
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800094c:	d3ed      	bcc.n	800092a <WRITE_TO_FLASHW25Q+0x66>
		}
		HAL_FLASH_Lock();
 800094e:	f000 fe03 	bl	8001558 <HAL_FLASH_Lock>
		W25Q_Write_Page(pageAddress, 0, CHUNKSIZE, MCUFLASHREAD); //writing data on the flash
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <WRITE_TO_FLASHW25Q+0xcc>)
 8000954:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000958:	2100      	movs	r1, #0
 800095a:	69f8      	ldr	r0, [r7, #28]
 800095c:	f7ff fea7 	bl	80006ae <W25Q_Write_Page>
		pageAddress += 4;			//increasing the pagenumber by 4 (each chunk is 1028 that is 4*256 (each page is 256 bytes)
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	3304      	adds	r3, #4
 8000964:	61fb      	str	r3, [r7, #28]
		bytesremains -= CHUNKSIZE;	//subtract chunk from remained data to transfer
 8000966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000968:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
	while(bytesremains > 0){
 800096e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000970:	2b00      	cmp	r3, #0
 8000972:	dcd5      	bgt.n	8000920 <WRITE_TO_FLASHW25Q+0x5c>

	}

	HAL_UART_Transmit(&huart3, (uint8_t *)"Writing Done\n", 14, 100);
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	220e      	movs	r2, #14
 8000978:	4906      	ldr	r1, [pc, #24]	@ (8000994 <WRITE_TO_FLASHW25Q+0xd0>)
 800097a:	4807      	ldr	r0, [pc, #28]	@ (8000998 <WRITE_TO_FLASHW25Q+0xd4>)
 800097c:	f002 fb5c 	bl	8003038 <HAL_UART_Transmit>


}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	@ 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	08008000 	.word	0x08008000
 800098c:	08040000 	.word	0x08040000
 8000990:	200000c8 	.word	0x200000c8
 8000994:	080040b4 	.word	0x080040b4
 8000998:	20000080 	.word	0x20000080

0800099c <WRITE_FROM_W25_TO_MCU>:
 * ***********************************************************
 * Function to Read program data from W25Q
 * and write it into the flash memory of STM32
 * ***********************************************************
 * */
void WRITE_FROM_W25_TO_MCU(uint32_t AppAddress, uint32_t W25QPageAddress, int32_t FirmwareSize){
 800099c:	b5b0      	push	{r4, r5, r7, lr}
 800099e:	b088      	sub	sp, #32
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]


	int32_t bytesremains = FirmwareSize;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	61fb      	str	r3, [r7, #28]
	uint32_t flashAddress = AppAddress;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	61bb      	str	r3, [r7, #24]
	uint32_t pageAddress = W25QPageAddress;
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	617b      	str	r3, [r7, #20]
	while(bytesremains > 0){
 80009b4:	e02c      	b.n	8000a10 <WRITE_FROM_W25_TO_MCU+0x74>
		W25Q_FastRead(pageAddress, 0, CHUNKSIZE, MCUFLASHREAD);
 80009b6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a2c <WRITE_FROM_W25_TO_MCU+0x90>)
 80009b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009bc:	2100      	movs	r1, #0
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff fddd 	bl	800057e <W25Q_FastRead>
		HAL_FLASH_Unlock();
 80009c4:	f000 fda6 	bl	8001514 <HAL_FLASH_Unlock>
		for(uint32_t i=0; i < CHUNKSIZE; i++){
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	e013      	b.n	80009f6 <WRITE_FROM_W25_TO_MCU+0x5a>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress, MCUFLASHREAD[i]);
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <WRITE_FROM_W25_TO_MCU+0x90>)
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	4413      	add	r3, r2
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	2200      	movs	r2, #0
 80009da:	461c      	mov	r4, r3
 80009dc:	4615      	mov	r5, r2
 80009de:	4622      	mov	r2, r4
 80009e0:	462b      	mov	r3, r5
 80009e2:	69b9      	ldr	r1, [r7, #24]
 80009e4:	2000      	movs	r0, #0
 80009e6:	f000 fd41 	bl	800146c <HAL_FLASH_Program>
			flashAddress++;
 80009ea:	69bb      	ldr	r3, [r7, #24]
 80009ec:	3301      	adds	r3, #1
 80009ee:	61bb      	str	r3, [r7, #24]
		for(uint32_t i=0; i < CHUNKSIZE; i++){
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	3301      	adds	r3, #1
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
 80009f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009fc:	d3e7      	bcc.n	80009ce <WRITE_FROM_W25_TO_MCU+0x32>
		}
		HAL_FLASH_Lock();
 80009fe:	f000 fdab 	bl	8001558 <HAL_FLASH_Lock>
		pageAddress += 4;
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	3304      	adds	r3, #4
 8000a06:	617b      	str	r3, [r7, #20]
		bytesremains -= CHUNKSIZE;
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8000a0e:	61fb      	str	r3, [r7, #28]
	while(bytesremains > 0){
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	dccf      	bgt.n	80009b6 <WRITE_FROM_W25_TO_MCU+0x1a>
	}
	HAL_UART_Transmit(&huart3, (uint8_t *)"Reading Done\n", 14, 100);
 8000a16:	2364      	movs	r3, #100	@ 0x64
 8000a18:	220e      	movs	r2, #14
 8000a1a:	4905      	ldr	r1, [pc, #20]	@ (8000a30 <WRITE_FROM_W25_TO_MCU+0x94>)
 8000a1c:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <WRITE_FROM_W25_TO_MCU+0x98>)
 8000a1e:	f002 fb0b 	bl	8003038 <HAL_UART_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200000c8 	.word	0x200000c8
 8000a30:	080040c4 	.word	0x080040c4
 8000a34:	20000080 	.word	0x20000080

08000a38 <HAL_UART_RxCpltCallback>:
 * R1: Read firmware1 from W25Q and program Flash of the MCU
 * R2: Read firmware2 from W25Q and program Flash of the MCU
 * ***********************************************************
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a26      	ldr	r2, [pc, #152]	@ (8000ae0 <HAL_UART_RxCpltCallback+0xa8>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d145      	bne.n	8000ad6 <HAL_UART_RxCpltCallback+0x9e>
		if(USART_CMD_REC[0] == 'R'){
 8000a4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b52      	cmp	r3, #82	@ 0x52
 8000a50:	d11c      	bne.n	8000a8c <HAL_UART_RxCpltCallback+0x54>
			switch(USART_CMD_REC[1]){
 8000a52:	4b24      	ldr	r3, [pc, #144]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000a54:	785b      	ldrb	r3, [r3, #1]
 8000a56:	2b31      	cmp	r3, #49	@ 0x31
 8000a58:	d002      	beq.n	8000a60 <HAL_UART_RxCpltCallback+0x28>
 8000a5a:	2b32      	cmp	r3, #50	@ 0x32
 8000a5c:	d007      	beq.n	8000a6e <HAL_UART_RxCpltCallback+0x36>
 8000a5e:	e00e      	b.n	8000a7e <HAL_UART_RxCpltCallback+0x46>
			case '1':
				WRITE_FROM_W25_TO_MCU(FIRMWARE1_BASE_ADDR, FIRMWARE1_PAGE_W25Q, FIRMWARE1_SIZE);
 8000a60:	f242 02ec 	movw	r2, #8428	@ 0x20ec
 8000a64:	2100      	movs	r1, #0
 8000a66:	4820      	ldr	r0, [pc, #128]	@ (8000ae8 <HAL_UART_RxCpltCallback+0xb0>)
 8000a68:	f7ff ff98 	bl	800099c <WRITE_FROM_W25_TO_MCU>
				break;
 8000a6c:	e02e      	b.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			case '2':
				WRITE_FROM_W25_TO_MCU(FIRMWARE2_BASE_ADDR, FIRMWARE2_PAGE_W25Q, FIRMWARE2_SIZE);
 8000a6e:	f242 02ec 	movw	r2, #8428	@ 0x20ec
 8000a72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a76:	481d      	ldr	r0, [pc, #116]	@ (8000aec <HAL_UART_RxCpltCallback+0xb4>)
 8000a78:	f7ff ff90 	bl	800099c <WRITE_FROM_W25_TO_MCU>
				break;
 8000a7c:	e026      	b.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			default:
				HAL_UART_Transmit(&huart3, (uint8_t *)"Please Send correct command\n", 29, 100);
 8000a7e:	2364      	movs	r3, #100	@ 0x64
 8000a80:	221d      	movs	r2, #29
 8000a82:	491b      	ldr	r1, [pc, #108]	@ (8000af0 <HAL_UART_RxCpltCallback+0xb8>)
 8000a84:	481b      	ldr	r0, [pc, #108]	@ (8000af4 <HAL_UART_RxCpltCallback+0xbc>)
 8000a86:	f002 fad7 	bl	8003038 <HAL_UART_Transmit>
 8000a8a:	e01f      	b.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			}

		}
		else if(USART_CMD_REC[0] == 'W'){
 8000a8c:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b57      	cmp	r3, #87	@ 0x57
 8000a92:	d11b      	bne.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			switch(USART_CMD_REC[1]){
 8000a94:	4b13      	ldr	r3, [pc, #76]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000a96:	785b      	ldrb	r3, [r3, #1]
 8000a98:	2b31      	cmp	r3, #49	@ 0x31
 8000a9a:	d002      	beq.n	8000aa2 <HAL_UART_RxCpltCallback+0x6a>
 8000a9c:	2b32      	cmp	r3, #50	@ 0x32
 8000a9e:	d007      	beq.n	8000ab0 <HAL_UART_RxCpltCallback+0x78>
 8000aa0:	e00e      	b.n	8000ac0 <HAL_UART_RxCpltCallback+0x88>
			case '1':
				WRITE_TO_FLASHW25Q(FIRMWARE1_BASE_ADDR, FIRMWARE1_PAGE_W25Q, FIRMWARE1_SIZE);
 8000aa2:	f242 02ec 	movw	r2, #8428	@ 0x20ec
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	480f      	ldr	r0, [pc, #60]	@ (8000ae8 <HAL_UART_RxCpltCallback+0xb0>)
 8000aaa:	f7ff ff0b 	bl	80008c4 <WRITE_TO_FLASHW25Q>
				break;
 8000aae:	e00d      	b.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			case '2':
				WRITE_TO_FLASHW25Q(FIRMWARE2_BASE_ADDR, FIRMWARE2_PAGE_W25Q, FIRMWARE2_SIZE);
 8000ab0:	f242 02ec 	movw	r2, #8428	@ 0x20ec
 8000ab4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <HAL_UART_RxCpltCallback+0xb4>)
 8000aba:	f7ff ff03 	bl	80008c4 <WRITE_TO_FLASHW25Q>
				break;
 8000abe:	e005      	b.n	8000acc <HAL_UART_RxCpltCallback+0x94>
			default:
				HAL_UART_Transmit(&huart3, (uint8_t *)"Please Send correct command\n", 29, 100);
 8000ac0:	2364      	movs	r3, #100	@ 0x64
 8000ac2:	221d      	movs	r2, #29
 8000ac4:	490a      	ldr	r1, [pc, #40]	@ (8000af0 <HAL_UART_RxCpltCallback+0xb8>)
 8000ac6:	480b      	ldr	r0, [pc, #44]	@ (8000af4 <HAL_UART_RxCpltCallback+0xbc>)
 8000ac8:	f002 fab6 	bl	8003038 <HAL_UART_Transmit>
			}

		}
		HAL_UART_Receive_IT(&huart3, USART_CMD_REC, 2);
 8000acc:	2202      	movs	r2, #2
 8000ace:	4905      	ldr	r1, [pc, #20]	@ (8000ae4 <HAL_UART_RxCpltCallback+0xac>)
 8000ad0:	4808      	ldr	r0, [pc, #32]	@ (8000af4 <HAL_UART_RxCpltCallback+0xbc>)
 8000ad2:	f002 fb3c 	bl	800314e <HAL_UART_Receive_IT>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40004800 	.word	0x40004800
 8000ae4:	200004c8 	.word	0x200004c8
 8000ae8:	08008000 	.word	0x08008000
 8000aec:	08040000 	.word	0x08040000
 8000af0:	080040d4 	.word	0x080040d4
 8000af4:	20000080 	.word	0x20000080

08000af8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000afc:	f000 fa7c 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b00:	f000 f824 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b04:	f000 f8ec 	bl	8000ce0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b08:	f000 f88a 	bl	8000c20 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000b0c:	f000 f8be 	bl	8000c8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  W25Q_Reset();
 8000b10:	f7ff fd1e 	bl	8000550 <W25Q_Reset>
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <main+0x48>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	68da      	ldr	r2, [r3, #12]
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <main+0x48>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f042 0220 	orr.w	r2, r2, #32
 8000b22:	60da      	str	r2, [r3, #12]
  HAL_UART_Transmit(&huart3, (uint8_t *)"Choose a command (R/W)(1/2)?", 29, 100);
 8000b24:	2364      	movs	r3, #100	@ 0x64
 8000b26:	221d      	movs	r2, #29
 8000b28:	4906      	ldr	r1, [pc, #24]	@ (8000b44 <main+0x4c>)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <main+0x48>)
 8000b2c:	f002 fa84 	bl	8003038 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart3, USART_CMD_REC, 2);
 8000b30:	2202      	movs	r2, #2
 8000b32:	4905      	ldr	r1, [pc, #20]	@ (8000b48 <main+0x50>)
 8000b34:	4802      	ldr	r0, [pc, #8]	@ (8000b40 <main+0x48>)
 8000b36:	f002 fb0a 	bl	800314e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b3a:	bf00      	nop
 8000b3c:	e7fd      	b.n	8000b3a <main+0x42>
 8000b3e:	bf00      	nop
 8000b40:	20000080 	.word	0x20000080
 8000b44:	080040f4 	.word	0x080040f4
 8000b48:	200004c8 	.word	0x200004c8

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	@ 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0320 	add.w	r3, r7, #32
 8000b56:	2230      	movs	r2, #48	@ 0x30
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f003 fa72 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b28      	ldr	r3, [pc, #160]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	4a27      	ldr	r2, [pc, #156]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b80:	4b25      	ldr	r3, [pc, #148]	@ (8000c18 <SystemClock_Config+0xcc>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	4b22      	ldr	r3, [pc, #136]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c1c <SystemClock_Config+0xd0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb0:	2310      	movs	r3, #16
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bc0:	23a8      	movs	r3, #168	@ 0xa8
 8000bc2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bcc:	f107 0320 	add.w	r3, r7, #32
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f000 ffb7 	bl	8001b44 <HAL_RCC_OscConfig>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bdc:	f000 f8d0 	bl	8000d80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be0:	230f      	movs	r3, #15
 8000be2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be4:	2302      	movs	r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bf8:	f107 030c 	add.w	r3, r7, #12
 8000bfc:	2105      	movs	r1, #5
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fa18 	bl	8002034 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c0a:	f000 f8b9 	bl	8000d80 <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	@ 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c24:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c26:	4a18      	ldr	r2, [pc, #96]	@ (8000c88 <MX_SPI2_Init+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c2a:	4b16      	ldr	r3, [pc, #88]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c2c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c30:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c50:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c52:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c64:	4b07      	ldr	r3, [pc, #28]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c6a:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c6c:	220a      	movs	r2, #10
 8000c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c70:	4804      	ldr	r0, [pc, #16]	@ (8000c84 <MX_SPI2_Init+0x64>)
 8000c72:	f001 fbbf 	bl	80023f4 <HAL_SPI_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c7c:	f000 f880 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c80:	bf00      	nop
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000028 	.word	0x20000028
 8000c88:	40003800 	.word	0x40003800

08000c8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <MX_USART3_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000c98:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <MX_USART3_UART_Init+0x4c>)
 8000cc4:	f002 f968 	bl	8002f98 <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f857 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000080 	.word	0x20000080
 8000cdc:	40004800 	.word	0x40004800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a17      	ldr	r2, [pc, #92]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0304 	and.w	r3, r3, #4
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	4b11      	ldr	r3, [pc, #68]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d38:	f043 0302 	orr.w	r3, r3, #2
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d78 <MX_GPIO_Init+0x98>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0302 	and.w	r3, r3, #2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <MX_GPIO_Init+0x9c>)
 8000d50:	f000 fede 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d54:	2310      	movs	r3, #16
 8000d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_GPIO_Init+0x9c>)
 8000d6c:	f000 fd34 	bl	80017d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020800 	.word	0x40020800

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
}
 8000d86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <Error_Handler+0x8>

08000d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000d9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	4a08      	ldr	r2, [pc, #32]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_MspInit+0x4c>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dc6:	603b      	str	r3, [r7, #0]
 8000dc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a19      	ldr	r2, [pc, #100]	@ (8000e60 <HAL_SPI_MspInit+0x84>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d12c      	bne.n	8000e58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e06:	4a17      	ldr	r2, [pc, #92]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e22:	4a10      	ldr	r2, [pc, #64]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e36:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e48:	2305      	movs	r3, #5
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <HAL_SPI_MspInit+0x8c>)
 8000e54:	f000 fcc0 	bl	80017d8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	@ 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40003800 	.word	0x40003800
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020400 	.word	0x40020400

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08a      	sub	sp, #40	@ 0x28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a1d      	ldr	r2, [pc, #116]	@ (8000f00 <HAL_UART_MspInit+0x94>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d134      	bne.n	8000ef8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
 8000e92:	4b1c      	ldr	r3, [pc, #112]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	4a1b      	ldr	r2, [pc, #108]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000e98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a14      	ldr	r2, [pc, #80]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_UART_MspInit+0x98>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ec6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <HAL_UART_MspInit+0x9c>)
 8000ee4:	f000 fc78 	bl	80017d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	2027      	movs	r0, #39	@ 0x27
 8000eee:	f000 f9f4 	bl	80012da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ef2:	2027      	movs	r0, #39	@ 0x27
 8000ef4:	f000 fa0d 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40004800 	.word	0x40004800
 8000f04:	40023800 	.word	0x40023800
 8000f08:	40020400 	.word	0x40020400

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <MemManage_Handler+0x4>

08000f24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <BusFault_Handler+0x4>

08000f2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <UsageFault_Handler+0x4>

08000f34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f89b 	bl	800109c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f70:	4802      	ldr	r0, [pc, #8]	@ (8000f7c <USART3_IRQHandler+0x10>)
 8000f72:	f002 f911 	bl	8003198 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	20000080 	.word	0x20000080

08000f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <SystemInit+0x20>)
 8000f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f8a:	4a05      	ldr	r2, [pc, #20]	@ (8000fa0 <SystemInit+0x20>)
 8000f8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fdc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000fa8:	f7ff ffea 	bl	8000f80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f003 f83f 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fd8f 	bl	8000af8 <main>
  bx  lr    
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fe8:	0800413c 	.word	0x0800413c
  ldr r2, =_sbss
 8000fec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ff0:	200004f0 	.word	0x200004f0

08000ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0d      	ldr	r2, [pc, #52]	@ (8001038 <HAL_Init+0x40>)
 8001002:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001006:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001008:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_Init+0x40>)
 800100e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001012:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a07      	ldr	r2, [pc, #28]	@ (8001038 <HAL_Init+0x40>)
 800101a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800101e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001020:	2003      	movs	r0, #3
 8001022:	f000 f94f 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f808 	bl	800103c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800102c:	f7ff feae 	bl	8000d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023c00 	.word	0x40023c00

0800103c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x54>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <HAL_InitTick+0x58>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4619      	mov	r1, r3
 800104e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001052:	fbb3 f3f1 	udiv	r3, r3, r1
 8001056:	fbb2 f3f3 	udiv	r3, r2, r3
 800105a:	4618      	mov	r0, r3
 800105c:	f000 f967 	bl	800132e <HAL_SYSTICK_Config>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e00e      	b.n	8001088 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	d80a      	bhi.n	8001086 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001070:	2200      	movs	r2, #0
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	f04f 30ff 	mov.w	r0, #4294967295
 8001078:	f000 f92f 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800107c:	4a06      	ldr	r2, [pc, #24]	@ (8001098 <HAL_InitTick+0x5c>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001082:	2300      	movs	r3, #0
 8001084:	e000      	b.n	8001088 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010a0:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <HAL_IncTick+0x20>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x24>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a04      	ldr	r2, [pc, #16]	@ (80010c0 <HAL_IncTick+0x24>)
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000008 	.word	0x20000008
 80010c0:	200004cc 	.word	0x200004cc

080010c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return uwTick;
 80010c8:	4b03      	ldr	r3, [pc, #12]	@ (80010d8 <HAL_GetTick+0x14>)
 80010ca:	681b      	ldr	r3, [r3, #0]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200004cc 	.word	0x200004cc

080010dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e4:	f7ff ffee 	bl	80010c4 <HAL_GetTick>
 80010e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f4:	d005      	beq.n	8001102 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <HAL_Delay+0x44>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	461a      	mov	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001102:	bf00      	nop
 8001104:	f7ff ffde 	bl	80010c4 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d8f7      	bhi.n	8001104 <HAL_Delay+0x28>
  {
  }
}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3710      	adds	r7, #16
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b084      	sub	sp, #16
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001352:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff feb6 	bl	80010c4 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d008      	beq.n	8001378 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2280      	movs	r2, #128	@ 0x80
 800136a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e052      	b.n	800141e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f022 0216 	bic.w	r2, r2, #22
 8001386:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	695a      	ldr	r2, [r3, #20]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001396:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_DMA_Abort+0x62>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0208 	bic.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c8:	e013      	b.n	80013f2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ca:	f7ff fe7b 	bl	80010c4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d90c      	bls.n	80013f2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2220      	movs	r2, #32
 80013dc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e015      	b.n	800141e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e4      	bne.n	80013ca <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001404:	223f      	movs	r2, #63	@ 0x3f
 8001406:	409a      	lsls	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d004      	beq.n	8001444 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2280      	movs	r2, #128	@ 0x80
 800143e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e00c      	b.n	800145e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2205      	movs	r2, #5
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0201 	bic.w	r2, r2, #1
 800145a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <HAL_FLASH_Program+0xa0>)
 8001480:	7e1b      	ldrb	r3, [r3, #24]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d101      	bne.n	800148a <HAL_FLASH_Program+0x1e>
 8001486:	2302      	movs	r3, #2
 8001488:	e03b      	b.n	8001502 <HAL_FLASH_Program+0x96>
 800148a:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_FLASH_Program+0xa0>)
 800148c:	2201      	movs	r2, #1
 800148e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001490:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001494:	f000 f870 	bl	8001578 <FLASH_WaitForLastOperation>
 8001498:	4603      	mov	r3, r0
 800149a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800149c:	7dfb      	ldrb	r3, [r7, #23]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12b      	bne.n	80014fa <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d105      	bne.n	80014b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80014a8:	783b      	ldrb	r3, [r7, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f000 f91b 	bl	80016e8 <FLASH_Program_Byte>
 80014b2:	e016      	b.n	80014e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d105      	bne.n	80014c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	4619      	mov	r1, r3
 80014be:	68b8      	ldr	r0, [r7, #8]
 80014c0:	f000 f8ee 	bl	80016a0 <FLASH_Program_HalfWord>
 80014c4:	e00d      	b.n	80014e2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d105      	bne.n	80014d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	4619      	mov	r1, r3
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f000 f8c3 	bl	800165c <FLASH_Program_Word>
 80014d6:	e004      	b.n	80014e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80014d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014dc:	68b8      	ldr	r0, [r7, #8]
 80014de:	f000 f88b 	bl	80015f8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014e2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80014e6:	f000 f847 	bl	8001578 <FLASH_WaitForLastOperation>
 80014ea:	4603      	mov	r3, r0
 80014ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <HAL_FLASH_Program+0xa4>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4a07      	ldr	r2, [pc, #28]	@ (8001510 <HAL_FLASH_Program+0xa4>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80014fa:	4b04      	ldr	r3, [pc, #16]	@ (800150c <HAL_FLASH_Program+0xa0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	761a      	strb	r2, [r3, #24]

  return status;
 8001500:	7dfb      	ldrb	r3, [r7, #23]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004d0 	.word	0x200004d0
 8001510:	40023c00 	.word	0x40023c00

08001514 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800151a:	2300      	movs	r3, #0
 800151c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800151e:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <HAL_FLASH_Unlock+0x38>)
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da0b      	bge.n	800153e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001526:	4b09      	ldr	r3, [pc, #36]	@ (800154c <HAL_FLASH_Unlock+0x38>)
 8001528:	4a09      	ldr	r2, [pc, #36]	@ (8001550 <HAL_FLASH_Unlock+0x3c>)
 800152a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800152c:	4b07      	ldr	r3, [pc, #28]	@ (800154c <HAL_FLASH_Unlock+0x38>)
 800152e:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <HAL_FLASH_Unlock+0x40>)
 8001530:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001532:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_FLASH_Unlock+0x38>)
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b00      	cmp	r3, #0
 8001538:	da01      	bge.n	800153e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800153e:	79fb      	ldrb	r3, [r7, #7]
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40023c00 	.word	0x40023c00
 8001550:	45670123 	.word	0x45670123
 8001554:	cdef89ab 	.word	0xcdef89ab

08001558 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800155c:	4b05      	ldr	r3, [pc, #20]	@ (8001574 <HAL_FLASH_Lock+0x1c>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <HAL_FLASH_Lock+0x1c>)
 8001562:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001566:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	40023c00 	.word	0x40023c00

08001578 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001584:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <FLASH_WaitForLastOperation+0x78>)
 8001586:	2200      	movs	r2, #0
 8001588:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800158a:	f7ff fd9b 	bl	80010c4 <HAL_GetTick>
 800158e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001590:	e010      	b.n	80015b4 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001598:	d00c      	beq.n	80015b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d007      	beq.n	80015b0 <FLASH_WaitForLastOperation+0x38>
 80015a0:	f7ff fd90 	bl	80010c4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d201      	bcs.n	80015b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e019      	b.n	80015e8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <FLASH_WaitForLastOperation+0x7c>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e8      	bne.n	8001592 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <FLASH_WaitForLastOperation+0x7c>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d002      	beq.n	80015d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <FLASH_WaitForLastOperation+0x7c>)
 80015ce:	2201      	movs	r2, #1
 80015d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <FLASH_WaitForLastOperation+0x7c>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015de:	f000 f8a5 	bl	800172c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80015e6:	2300      	movs	r3, #0

}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3710      	adds	r7, #16
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	200004d0 	.word	0x200004d0
 80015f4:	40023c00 	.word	0x40023c00

080015f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001604:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	4a13      	ldr	r2, [pc, #76]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 800160a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800160e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001610:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 8001616:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800161a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a0d      	ldr	r2, [pc, #52]	@ (8001658 <FLASH_Program_DoubleWord+0x60>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800162e:	f3bf 8f6f 	isb	sy
}
 8001632:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	000a      	movs	r2, r1
 8001642:	2300      	movs	r3, #0
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	3104      	adds	r1, #4
 8001648:	4613      	mov	r3, r2
 800164a:	600b      	str	r3, [r1, #0]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	40023c00 	.word	0x40023c00

0800165c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <FLASH_Program_Word+0x40>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	4a0c      	ldr	r2, [pc, #48]	@ (800169c <FLASH_Program_Word+0x40>)
 800166c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001670:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <FLASH_Program_Word+0x40>)
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	4a09      	ldr	r2, [pc, #36]	@ (800169c <FLASH_Program_Word+0x40>)
 8001678:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800167c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800167e:	4b07      	ldr	r3, [pc, #28]	@ (800169c <FLASH_Program_Word+0x40>)
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	4a06      	ldr	r2, [pc, #24]	@ (800169c <FLASH_Program_Word+0x40>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	601a      	str	r2, [r3, #0]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40023c00 	.word	0x40023c00

080016a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	4a09      	ldr	r2, [pc, #36]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <FLASH_Program_HalfWord+0x44>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	801a      	strh	r2, [r3, #0]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023c00 	.word	0x40023c00

080016e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <FLASH_Program_Byte+0x40>)
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <FLASH_Program_Byte+0x40>)
 80016fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001700:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <FLASH_Program_Byte+0x40>)
 8001702:	4a09      	ldr	r2, [pc, #36]	@ (8001728 <FLASH_Program_Byte+0x40>)
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001708:	4b07      	ldr	r3, [pc, #28]	@ (8001728 <FLASH_Program_Byte+0x40>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	4a06      	ldr	r2, [pc, #24]	@ (8001728 <FLASH_Program_Byte+0x40>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	701a      	strb	r2, [r3, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800173c:	4b25      	ldr	r3, [pc, #148]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	4a23      	ldr	r2, [pc, #140]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 8001746:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 800174a:	2210      	movs	r2, #16
 800174c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	f003 0320 	and.w	r3, r3, #32
 8001756:	2b00      	cmp	r3, #0
 8001758:	d008      	beq.n	800176c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800175a:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	4a1c      	ldr	r2, [pc, #112]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 8001764:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001766:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 8001768:	2220      	movs	r2, #32
 800176a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800176c:	4b18      	ldr	r3, [pc, #96]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 8001782:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001784:	4b12      	ldr	r3, [pc, #72]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 8001786:	2240      	movs	r2, #64	@ 0x40
 8001788:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001796:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	4a0d      	ldr	r2, [pc, #52]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 80017a0:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80017a2:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 80017a4:	2280      	movs	r2, #128	@ 0x80
 80017a6:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80017a8:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d008      	beq.n	80017c6 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80017b4:	4b07      	ldr	r3, [pc, #28]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	f043 0320 	orr.w	r3, r3, #32
 80017bc:	4a05      	ldr	r2, [pc, #20]	@ (80017d4 <FLASH_SetErrorCode+0xa8>)
 80017be:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80017c0:	4b03      	ldr	r3, [pc, #12]	@ (80017d0 <FLASH_SetErrorCode+0xa4>)
 80017c2:	2202      	movs	r2, #2
 80017c4:	60da      	str	r2, [r3, #12]
  }
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	40023c00 	.word	0x40023c00
 80017d4:	200004d0 	.word	0x200004d0

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	@ 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	e16b      	b.n	8001acc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	429a      	cmp	r2, r3
 800180e:	f040 815a 	bne.w	8001ac6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b01      	cmp	r3, #1
 800181c:	d005      	beq.n	800182a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001826:	2b02      	cmp	r3, #2
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b03      	cmp	r3, #3
 8001896:	d017      	beq.n	80018c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	2203      	movs	r2, #3
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d123      	bne.n	800191c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	08da      	lsrs	r2, r3, #3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3208      	adds	r2, #8
 80018dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	220f      	movs	r2, #15
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691a      	ldr	r2, [r3, #16]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	08da      	lsrs	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3208      	adds	r2, #8
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	2203      	movs	r2, #3
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	43db      	mvns	r3, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 0203 	and.w	r2, r3, #3
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80b4 	beq.w	8001ac6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	4b60      	ldr	r3, [pc, #384]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	4a5f      	ldr	r2, [pc, #380]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800196c:	6453      	str	r3, [r2, #68]	@ 0x44
 800196e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ae4 <HAL_GPIO_Init+0x30c>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	089b      	lsrs	r3, r3, #2
 8001980:	3302      	adds	r3, #2
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a52      	ldr	r2, [pc, #328]	@ (8001aec <HAL_GPIO_Init+0x314>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x226>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a51      	ldr	r2, [pc, #324]	@ (8001af0 <HAL_GPIO_Init+0x318>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d025      	beq.n	80019fa <HAL_GPIO_Init+0x222>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a50      	ldr	r2, [pc, #320]	@ (8001af4 <HAL_GPIO_Init+0x31c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d01f      	beq.n	80019f6 <HAL_GPIO_Init+0x21e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <HAL_GPIO_Init+0x320>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d019      	beq.n	80019f2 <HAL_GPIO_Init+0x21a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <HAL_GPIO_Init+0x324>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d013      	beq.n	80019ee <HAL_GPIO_Init+0x216>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001b00 <HAL_GPIO_Init+0x328>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00d      	beq.n	80019ea <HAL_GPIO_Init+0x212>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001b04 <HAL_GPIO_Init+0x32c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d007      	beq.n	80019e6 <HAL_GPIO_Init+0x20e>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001b08 <HAL_GPIO_Init+0x330>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d101      	bne.n	80019e2 <HAL_GPIO_Init+0x20a>
 80019de:	2307      	movs	r3, #7
 80019e0:	e00e      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e2:	2308      	movs	r3, #8
 80019e4:	e00c      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019e6:	2306      	movs	r3, #6
 80019e8:	e00a      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ea:	2305      	movs	r3, #5
 80019ec:	e008      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019ee:	2304      	movs	r3, #4
 80019f0:	e006      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e004      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019f6:	2302      	movs	r3, #2
 80019f8:	e002      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_GPIO_Init+0x228>
 80019fe:	2300      	movs	r3, #0
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f002 0203 	and.w	r2, r2, #3
 8001a06:	0092      	lsls	r2, r2, #2
 8001a08:	4093      	lsls	r3, r2
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a10:	4935      	ldr	r1, [pc, #212]	@ (8001ae8 <HAL_GPIO_Init+0x310>)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	089b      	lsrs	r3, r3, #2
 8001a16:	3302      	adds	r3, #2
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a42:	4a32      	ldr	r2, [pc, #200]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a48:	4b30      	ldr	r3, [pc, #192]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d003      	beq.n	8001a6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a6c:	4a27      	ldr	r2, [pc, #156]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a72:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	43db      	mvns	r3, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d003      	beq.n	8001a96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a96:	4a1d      	ldr	r2, [pc, #116]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d003      	beq.n	8001ac0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac0:	4a12      	ldr	r2, [pc, #72]	@ (8001b0c <HAL_GPIO_Init+0x334>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	61fb      	str	r3, [r7, #28]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	2b0f      	cmp	r3, #15
 8001ad0:	f67f ae90 	bls.w	80017f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad4:	bf00      	nop
 8001ad6:	bf00      	nop
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40013800 	.word	0x40013800
 8001aec:	40020000 	.word	0x40020000
 8001af0:	40020400 	.word	0x40020400
 8001af4:	40020800 	.word	0x40020800
 8001af8:	40020c00 	.word	0x40020c00
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40021400 	.word	0x40021400
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40021c00 	.word	0x40021c00
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e267      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d075      	beq.n	8001c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b62:	4b88      	ldr	r3, [pc, #544]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 030c 	and.w	r3, r3, #12
 8001b6a:	2b04      	cmp	r3, #4
 8001b6c:	d00c      	beq.n	8001b88 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b6e:	4b85      	ldr	r3, [pc, #532]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b76:	2b08      	cmp	r3, #8
 8001b78:	d112      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b7a:	4b82      	ldr	r3, [pc, #520]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b86:	d10b      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	4b7e      	ldr	r3, [pc, #504]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05b      	beq.n	8001c4c <HAL_RCC_OscConfig+0x108>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d157      	bne.n	8001c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e242      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba8:	d106      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x74>
 8001baa:	4b76      	ldr	r3, [pc, #472]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x98>
 8001bc2:	4b70      	ldr	r3, [pc, #448]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6f      	ldr	r2, [pc, #444]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6d      	ldr	r3, [pc, #436]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xb0>
 8001bdc:	4b69      	ldr	r3, [pc, #420]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a68      	ldr	r2, [pc, #416]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b66      	ldr	r3, [pc, #408]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fa62 	bl	80010c4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fa5e 	bl	80010c4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	@ 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e207      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5b      	ldr	r3, [pc, #364]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xc0>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fa4e 	bl	80010c4 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fa4a 	bl	80010c4 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	@ 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1f3      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b51      	ldr	r3, [pc, #324]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0xe8>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c66:	4b47      	ldr	r3, [pc, #284]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c72:	4b44      	ldr	r3, [pc, #272]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b41      	ldr	r3, [pc, #260]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c7      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3b      	ldr	r3, [pc, #236]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4937      	ldr	r1, [pc, #220]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b34      	ldr	r3, [pc, #208]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff fa03 	bl	80010c4 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff f9ff 	bl	80010c4 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a8      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b28      	ldr	r3, [pc, #160]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4925      	ldr	r1, [pc, #148]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <HAL_RCC_OscConfig+0x244>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f9e2 	bl	80010c4 <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff f9de 	bl	80010c4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e187      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d036      	beq.n	8001d9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d016      	beq.n	8001d64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f9c2 	bl	80010c4 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff f9be 	bl	80010c4 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e167      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0b      	ldr	r3, [pc, #44]	@ (8001d84 <HAL_RCC_OscConfig+0x240>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x200>
 8001d62:	e01b      	b.n	8001d9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_OscConfig+0x248>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f9ab 	bl	80010c4 <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00e      	b.n	8001d90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff f9a7 	bl	80010c4 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d907      	bls.n	8001d90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e150      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001d84:	40023800 	.word	0x40023800
 8001d88:	42470000 	.word	0x42470000
 8001d8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d90:	4b88      	ldr	r3, [pc, #544]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1ea      	bne.n	8001d72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0304 	and.w	r3, r3, #4
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 8097 	beq.w	8001ed8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dae:	4b81      	ldr	r3, [pc, #516]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10f      	bne.n	8001dda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	4b7d      	ldr	r3, [pc, #500]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a7c      	ldr	r2, [pc, #496]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b7a      	ldr	r3, [pc, #488]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd2:	60bb      	str	r3, [r7, #8]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dda:	4b77      	ldr	r3, [pc, #476]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d118      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de6:	4b74      	ldr	r3, [pc, #464]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a73      	ldr	r2, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f967 	bl	80010c4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff f963 	bl	80010c4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e10c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0c:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb8 <HAL_RCC_OscConfig+0x474>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2ea>
 8001e20:	4b64      	ldr	r3, [pc, #400]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e24:	4a63      	ldr	r2, [pc, #396]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x30c>
 8001e36:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e42:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e46:	4a5b      	ldr	r2, [pc, #364]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x324>
 8001e50:	4b58      	ldr	r3, [pc, #352]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e54:	4a57      	ldr	r2, [pc, #348]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5c:	4b55      	ldr	r3, [pc, #340]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e60:	4a54      	ldr	r2, [pc, #336]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d015      	beq.n	8001e9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff f928 	bl	80010c4 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7ff f924 	bl	80010c4 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0cb      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	4b49      	ldr	r3, [pc, #292]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0ee      	beq.n	8001e78 <HAL_RCC_OscConfig+0x334>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9c:	f7ff f912 	bl	80010c4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f90e 	bl	80010c4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e0b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ec6:	7dfb      	ldrb	r3, [r7, #23]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b39      	ldr	r3, [pc, #228]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed0:	4a38      	ldr	r2, [pc, #224]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a1 	beq.w	8002024 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b34      	ldr	r3, [pc, #208]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 030c 	and.w	r3, r3, #12
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d05c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d141      	bne.n	8001f7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b31      	ldr	r3, [pc, #196]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff f8e2 	bl	80010c4 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff f8de 	bl	80010c4 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e087      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b27      	ldr	r3, [pc, #156]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	019b      	lsls	r3, r3, #6
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	085b      	lsrs	r3, r3, #1
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	041b      	lsls	r3, r3, #16
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f44:	061b      	lsls	r3, r3, #24
 8001f46:	491b      	ldr	r1, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff f8b7 	bl	80010c4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff f8b3 	bl	80010c4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e05c      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x416>
 8001f78:	e054      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_RCC_OscConfig+0x478>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff f8a0 	bl	80010c4 <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f88:	f7ff f89c 	bl	80010c4 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e045      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1f0      	bne.n	8001f88 <HAL_RCC_OscConfig+0x444>
 8001fa6:	e03d      	b.n	8002024 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e038      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002030 <HAL_RCC_OscConfig+0x4ec>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d028      	beq.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d121      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11a      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ff6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d111      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	085b      	lsrs	r3, r3, #1
 8002008:	3b01      	subs	r3, #1
 800200a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800

08002034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0cc      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b68      	ldr	r3, [pc, #416]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d90c      	bls.n	8002070 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b65      	ldr	r3, [pc, #404]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205e:	4b63      	ldr	r3, [pc, #396]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0307 	and.w	r3, r3, #7
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	429a      	cmp	r2, r3
 800206a:	d001      	beq.n	8002070 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0b8      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d020      	beq.n	80020be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002088:	4b59      	ldr	r3, [pc, #356]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4a58      	ldr	r2, [pc, #352]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002092:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020a0:	4b53      	ldr	r3, [pc, #332]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a52      	ldr	r2, [pc, #328]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b50      	ldr	r3, [pc, #320]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	494d      	ldr	r1, [pc, #308]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d044      	beq.n	8002154 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020d2:	4b47      	ldr	r3, [pc, #284]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d119      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e07f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020f2:	4b3f      	ldr	r3, [pc, #252]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002102:	4b3b      	ldr	r3, [pc, #236]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e067      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002112:	4b37      	ldr	r3, [pc, #220]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f023 0203 	bic.w	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	4934      	ldr	r1, [pc, #208]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002120:	4313      	orrs	r3, r2
 8002122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002124:	f7fe ffce 	bl	80010c4 <HAL_GetTick>
 8002128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800212a:	e00a      	b.n	8002142 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800212c:	f7fe ffca 	bl	80010c4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e04f      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	4b2b      	ldr	r3, [pc, #172]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 020c 	and.w	r2, r3, #12
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	429a      	cmp	r2, r3
 8002152:	d1eb      	bne.n	800212c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002154:	4b25      	ldr	r3, [pc, #148]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d20c      	bcs.n	800217c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	4b22      	ldr	r3, [pc, #136]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	b2d2      	uxtb	r2, r2
 8002168:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <HAL_RCC_ClockConfig+0x1b8>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d001      	beq.n	800217c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e032      	b.n	80021e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d008      	beq.n	800219a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002188:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4916      	ldr	r1, [pc, #88]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021a6:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	490e      	ldr	r1, [pc, #56]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ba:	f000 f821 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 80021be:	4602      	mov	r2, r0
 80021c0:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	091b      	lsrs	r3, r3, #4
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	490a      	ldr	r1, [pc, #40]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	5ccb      	ldrb	r3, [r1, r3]
 80021ce:	fa22 f303 	lsr.w	r3, r2, r3
 80021d2:	4a09      	ldr	r2, [pc, #36]	@ (80021f8 <HAL_RCC_ClockConfig+0x1c4>)
 80021d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_ClockConfig+0x1c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe ff2e 	bl	800103c <HAL_InitTick>

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40023c00 	.word	0x40023c00
 80021f0:	40023800 	.word	0x40023800
 80021f4:	08004114 	.word	0x08004114
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002204:	b090      	sub	sp, #64	@ 0x40
 8002206:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002218:	4b59      	ldr	r3, [pc, #356]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d00d      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002224:	2b08      	cmp	r3, #8
 8002226:	f200 80a1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x16c>
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
 800222e:	2b04      	cmp	r3, #4
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002232:	e09b      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002238:	e09b      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b53      	ldr	r3, [pc, #332]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800223c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800223e:	e098      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002240:	4b4f      	ldr	r3, [pc, #316]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002248:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800224a:	4b4d      	ldr	r3, [pc, #308]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d028      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002256:	4b4a      	ldr	r3, [pc, #296]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	099b      	lsrs	r3, r3, #6
 800225c:	2200      	movs	r2, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	627a      	str	r2, [r7, #36]	@ 0x24
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002268:	2100      	movs	r1, #0
 800226a:	4b47      	ldr	r3, [pc, #284]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800226c:	fb03 f201 	mul.w	r2, r3, r1
 8002270:	2300      	movs	r3, #0
 8002272:	fb00 f303 	mul.w	r3, r0, r3
 8002276:	4413      	add	r3, r2
 8002278:	4a43      	ldr	r2, [pc, #268]	@ (8002388 <HAL_RCC_GetSysClockFreq+0x188>)
 800227a:	fba0 1202 	umull	r1, r2, r0, r2
 800227e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002280:	460a      	mov	r2, r1
 8002282:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002286:	4413      	add	r3, r2
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800228c:	2200      	movs	r2, #0
 800228e:	61bb      	str	r3, [r7, #24]
 8002290:	61fa      	str	r2, [r7, #28]
 8002292:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002296:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800229a:	f7fd ff95 	bl	80001c8 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4613      	mov	r3, r2
 80022a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022a6:	e053      	b.n	8002350 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a8:	4b35      	ldr	r3, [pc, #212]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	099b      	lsrs	r3, r3, #6
 80022ae:	2200      	movs	r2, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	617a      	str	r2, [r7, #20]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80022ba:	f04f 0b00 	mov.w	fp, #0
 80022be:	4652      	mov	r2, sl
 80022c0:	465b      	mov	r3, fp
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	0159      	lsls	r1, r3, #5
 80022cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d0:	0150      	lsls	r0, r2, #5
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	ebb2 080a 	subs.w	r8, r2, sl
 80022da:	eb63 090b 	sbc.w	r9, r3, fp
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80022ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80022ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80022f2:	ebb2 0408 	subs.w	r4, r2, r8
 80022f6:	eb63 0509 	sbc.w	r5, r3, r9
 80022fa:	f04f 0200 	mov.w	r2, #0
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	00eb      	lsls	r3, r5, #3
 8002304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002308:	00e2      	lsls	r2, r4, #3
 800230a:	4614      	mov	r4, r2
 800230c:	461d      	mov	r5, r3
 800230e:	eb14 030a 	adds.w	r3, r4, sl
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	eb45 030b 	adc.w	r3, r5, fp
 8002318:	607b      	str	r3, [r7, #4]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002326:	4629      	mov	r1, r5
 8002328:	028b      	lsls	r3, r1, #10
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002330:	4621      	mov	r1, r4
 8002332:	028a      	lsls	r2, r1, #10
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233a:	2200      	movs	r2, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	60fa      	str	r2, [r7, #12]
 8002340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002344:	f7fd ff40 	bl	80001c8 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002350:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x180>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	0c1b      	lsrs	r3, r3, #16
 8002356:	f003 0303 	and.w	r3, r3, #3
 800235a:	3301      	adds	r3, #1
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002360:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x184>)
 800236e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002374:	4618      	mov	r0, r3
 8002376:	3740      	adds	r7, #64	@ 0x40
 8002378:	46bd      	mov	sp, r7
 800237a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	00f42400 	.word	0x00f42400
 8002388:	017d7840 	.word	0x017d7840

0800238c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b03      	ldr	r3, [pc, #12]	@ (80023a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000000 	.word	0x20000000

080023a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a8:	f7ff fff0 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023ac:	4602      	mov	r2, r0
 80023ae:	4b05      	ldr	r3, [pc, #20]	@ (80023c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	0a9b      	lsrs	r3, r3, #10
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	4903      	ldr	r1, [pc, #12]	@ (80023c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ba:	5ccb      	ldrb	r3, [r1, r3]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	08004124 	.word	0x08004124

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023d0:	f7ff ffdc 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0b5b      	lsrs	r3, r3, #13
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4903      	ldr	r1, [pc, #12]	@ (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	08004124 	.word	0x08004124

080023f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07b      	b.n	80024fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	2b00      	cmp	r3, #0
 800240c:	d108      	bne.n	8002420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002416:	d009      	beq.n	800242c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	61da      	str	r2, [r3, #28]
 800241e:	e005      	b.n	800242c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7fe fcc8 	bl	8000ddc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a6:	431a      	orrs	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	0c1b      	lsrs	r3, r3, #16
 80024ca:	f003 0104 	and.w	r1, r3, #4
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	f003 0210 	and.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69da      	ldr	r2, [r3, #28]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b088      	sub	sp, #32
 800250a:	af00      	add	r7, sp, #0
 800250c:	60f8      	str	r0, [r7, #12]
 800250e:	60b9      	str	r1, [r7, #8]
 8002510:	603b      	str	r3, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002516:	f7fe fdd5 	bl	80010c4 <HAL_GetTick>
 800251a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b01      	cmp	r3, #1
 800252a:	d001      	beq.n	8002530 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800252c:	2302      	movs	r3, #2
 800252e:	e12a      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d002      	beq.n	800253c <HAL_SPI_Transmit+0x36>
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e122      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_SPI_Transmit+0x48>
 800254a:	2302      	movs	r3, #2
 800254c:	e11b      	b.n	8002786 <HAL_SPI_Transmit+0x280>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2203      	movs	r2, #3
 800255a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	88fa      	ldrh	r2, [r7, #6]
 800256e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800259c:	d10f      	bne.n	80025be <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80025ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d007      	beq.n	80025dc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80025e4:	d152      	bne.n	800268c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_SPI_Transmit+0xee>
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d145      	bne.n	8002680 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	881a      	ldrh	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002604:	1c9a      	adds	r2, r3, #2
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800260e:	b29b      	uxth	r3, r3
 8002610:	3b01      	subs	r3, #1
 8002612:	b29a      	uxth	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002618:	e032      	b.n	8002680 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b02      	cmp	r3, #2
 8002626:	d112      	bne.n	800264e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800264c:	e018      	b.n	8002680 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800264e:	f7fe fd39 	bl	80010c4 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d803      	bhi.n	8002666 <HAL_SPI_Transmit+0x160>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d102      	bne.n	800266c <HAL_SPI_Transmit+0x166>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e082      	b.n	8002786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c7      	bne.n	800261a <HAL_SPI_Transmit+0x114>
 800268a:	e053      	b.n	8002734 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_SPI_Transmit+0x194>
 8002694:	8b7b      	ldrh	r3, [r7, #26]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d147      	bne.n	800272a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	330c      	adds	r3, #12
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	3b01      	subs	r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80026c0:	e033      	b.n	800272a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d113      	bne.n	80026f8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	330c      	adds	r3, #12
 80026da:	7812      	ldrb	r2, [r2, #0]
 80026dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e2:	1c5a      	adds	r2, r3, #1
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	3b01      	subs	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80026f6:	e018      	b.n	800272a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026f8:	f7fe fce4 	bl	80010c4 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d803      	bhi.n	8002710 <HAL_SPI_Transmit+0x20a>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270e:	d102      	bne.n	8002716 <HAL_SPI_Transmit+0x210>
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e02d      	b.n	8002786 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1c6      	bne.n	80026c2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fbd9 	bl	8002ef0 <SPI_EndRxTxTransaction>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2220      	movs	r2, #32
 8002748:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10a      	bne.n	8002768 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002784:	2300      	movs	r3, #0
  }
}
 8002786:	4618      	mov	r0, r3
 8002788:	3720      	adds	r7, #32
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b088      	sub	sp, #32
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d001      	beq.n	80027ae <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	e104      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027b6:	d112      	bne.n	80027de <HAL_SPI_Receive+0x50>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10e      	bne.n	80027de <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2204      	movs	r2, #4
 80027c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80027c8:	88fa      	ldrh	r2, [r7, #6]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 f8f3 	bl	80029c0 <HAL_SPI_TransmitReceive>
 80027da:	4603      	mov	r3, r0
 80027dc:	e0ec      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027de:	f7fe fc71 	bl	80010c4 <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_SPI_Receive+0x62>
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0e1      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_SPI_Receive+0x74>
 80027fe:	2302      	movs	r3, #2
 8002800:	e0da      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	88fa      	ldrh	r2, [r7, #6]
 8002828:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002850:	d10f      	bne.n	8002872 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002860:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800287c:	2b40      	cmp	r3, #64	@ 0x40
 800287e:	d007      	beq.n	8002890 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800288e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d170      	bne.n	800297a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002898:	e035      	b.n	8002906 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d115      	bne.n	80028d4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f103 020c 	add.w	r2, r3, #12
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b4:	7812      	ldrb	r2, [r2, #0]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80028d2:	e018      	b.n	8002906 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028d4:	f7fe fbf6 	bl	80010c4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d803      	bhi.n	80028ec <HAL_SPI_Receive+0x15e>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d102      	bne.n	80028f2 <HAL_SPI_Receive+0x164>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e058      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800290a:	b29b      	uxth	r3, r3
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1c4      	bne.n	800289a <HAL_SPI_Receive+0x10c>
 8002910:	e038      	b.n	8002984 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	2b01      	cmp	r3, #1
 800291e:	d113      	bne.n	8002948 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800292a:	b292      	uxth	r2, r2
 800292c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002932:	1c9a      	adds	r2, r3, #2
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002946:	e018      	b.n	800297a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002948:	f7fe fbbc 	bl	80010c4 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d803      	bhi.n	8002960 <HAL_SPI_Receive+0x1d2>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295e:	d102      	bne.n	8002966 <HAL_SPI_Receive+0x1d8>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d109      	bne.n	800297a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e01e      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297e:	b29b      	uxth	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1c6      	bne.n	8002912 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 fa4b 	bl	8002e24 <SPI_EndRxTransaction>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80029b6:	2300      	movs	r3, #0
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029ce:	2301      	movs	r3, #1
 80029d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029d2:	f7fe fb77 	bl	80010c4 <HAL_GetTick>
 80029d6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029de:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029ea:	7ffb      	ldrb	r3, [r7, #31]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d00c      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x4a>
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029f6:	d106      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_SPI_TransmitReceive+0x46>
 8002a00:	7ffb      	ldrb	r3, [r7, #31]
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d001      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002a06:	2302      	movs	r3, #2
 8002a08:	e17f      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x5c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d002      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x5c>
 8002a16:	887b      	ldrh	r3, [r7, #2]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d101      	bne.n	8002a20 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e174      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <HAL_SPI_TransmitReceive+0x6e>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e16d      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d003      	beq.n	8002a4a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2205      	movs	r2, #5
 8002a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	887a      	ldrh	r2, [r7, #2]
 8002a60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	887a      	ldrh	r2, [r7, #2]
 8002a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	887a      	ldrh	r2, [r7, #2]
 8002a72:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b40      	cmp	r3, #64	@ 0x40
 8002a8c:	d007      	beq.n	8002a9e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aa6:	d17e      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_SPI_TransmitReceive+0xf6>
 8002ab0:	8afb      	ldrh	r3, [r7, #22]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d16c      	bne.n	8002b90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	881a      	ldrh	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	1c9a      	adds	r2, r3, #2
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ada:	e059      	b.n	8002b90 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d11b      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x162>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d016      	beq.n	8002b22 <HAL_SPI_TransmitReceive+0x162>
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d113      	bne.n	8002b22 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	881a      	ldrh	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	1c9a      	adds	r2, r3, #2
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d119      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x1a4>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d014      	beq.n	8002b64 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	b292      	uxth	r2, r2
 8002b46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b60:	2301      	movs	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b64:	f7fe faae 	bl	80010c4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d80d      	bhi.n	8002b90 <HAL_SPI_TransmitReceive+0x1d0>
 8002b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d009      	beq.n	8002b90 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e0bc      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1a0      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x11c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d19b      	bne.n	8002adc <HAL_SPI_TransmitReceive+0x11c>
 8002ba4:	e082      	b.n	8002cac <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_SPI_TransmitReceive+0x1f4>
 8002bae:	8afb      	ldrh	r3, [r7, #22]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d171      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	330c      	adds	r3, #12
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bda:	e05d      	b.n	8002c98 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d11c      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x264>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d017      	beq.n	8002c24 <HAL_SPI_TransmitReceive+0x264>
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d114      	bne.n	8002c24 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	b29a      	uxth	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d119      	bne.n	8002c66 <HAL_SPI_TransmitReceive+0x2a6>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d014      	beq.n	8002c66 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	b29a      	uxth	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c62:	2301      	movs	r3, #1
 8002c64:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c66:	f7fe fa2d 	bl	80010c4 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d803      	bhi.n	8002c7e <HAL_SPI_TransmitReceive+0x2be>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d102      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2c4>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e038      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d19c      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x21c>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d197      	bne.n	8002bdc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cac:	6a3a      	ldr	r2, [r7, #32]
 8002cae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 f91d 	bl	8002ef0 <SPI_EndRxTxTransaction>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e01d      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d08:	2300      	movs	r3, #0
  }
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3728      	adds	r7, #40	@ 0x28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
	...

08002d14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	4613      	mov	r3, r2
 8002d22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d24:	f7fe f9ce 	bl	80010c4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	4413      	add	r3, r2
 8002d32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d34:	f7fe f9c6 	bl	80010c4 <HAL_GetTick>
 8002d38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d3a:	4b39      	ldr	r3, [pc, #228]	@ (8002e20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	015b      	lsls	r3, r3, #5
 8002d40:	0d1b      	lsrs	r3, r3, #20
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d4a:	e054      	b.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d52:	d050      	beq.n	8002df6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d54:	f7fe f9b6 	bl	80010c4 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d902      	bls.n	8002d6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d13d      	bne.n	8002de6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d82:	d111      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d8c:	d004      	beq.n	8002d98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d96:	d107      	bne.n	8002da8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002da6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db0:	d10f      	bne.n	8002dd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e017      	b.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	bf0c      	ite	eq
 8002e06:	2301      	moveq	r3, #1
 8002e08:	2300      	movne	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d19b      	bne.n	8002d4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000000 	.word	0x20000000

08002e24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af02      	add	r7, sp, #8
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e38:	d111      	bne.n	8002e5e <SPI_EndRxTransaction+0x3a>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e42:	d004      	beq.n	8002e4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e4c:	d107      	bne.n	8002e5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e66:	d12a      	bne.n	8002ebe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e70:	d012      	beq.n	8002e98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	2180      	movs	r1, #128	@ 0x80
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f7ff ff49 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d02d      	beq.n	8002ee4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e026      	b.n	8002ee6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff ff36 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01a      	beq.n	8002ee4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb2:	f043 0220 	orr.w	r2, r3, #32
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e013      	b.n	8002ee6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	2101      	movs	r1, #1
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff ff23 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ed8:	f043 0220 	orr.w	r2, r3, #32
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2201      	movs	r2, #1
 8002f04:	2102      	movs	r1, #2
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff04 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e032      	b.n	8002f88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <SPI_EndRxTxTransaction+0xa0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <SPI_EndRxTxTransaction+0xa4>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f40:	d112      	bne.n	8002f68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff fee1 	bl	8002d14 <SPI_WaitFlagStateUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e00f      	b.n	8002f88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d0f2      	beq.n	8002f68 <SPI_EndRxTxTransaction+0x78>
 8002f82:	e000      	b.n	8002f86 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f84:	bf00      	nop
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000000 	.word	0x20000000
 8002f94:	165e9f81 	.word	0x165e9f81

08002f98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e042      	b.n	8003030 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd ff54 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fdbd 	bl	8003b5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691a      	ldr	r2, [r3, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003000:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003010:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	@ 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b20      	cmp	r3, #32
 8003056:	d175      	bne.n	8003144 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_UART_Transmit+0x2c>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e06e      	b.n	8003146 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2221      	movs	r2, #33	@ 0x21
 8003072:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003076:	f7fe f825 	bl	80010c4 <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	88fa      	ldrh	r2, [r7, #6]
 8003080:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	88fa      	ldrh	r2, [r7, #6]
 8003086:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003090:	d108      	bne.n	80030a4 <HAL_UART_Transmit+0x6c>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	e003      	b.n	80030ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030ac:	e02e      	b.n	800310c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	@ 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fb1f 	bl	80036fc <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e03a      	b.n	8003146 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10b      	bne.n	80030ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	881b      	ldrh	r3, [r3, #0]
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3302      	adds	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	e007      	b.n	80030fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003102:	b29b      	uxth	r3, r3
 8003104:	3b01      	subs	r3, #1
 8003106:	b29a      	uxth	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1cb      	bne.n	80030ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2200      	movs	r2, #0
 800311e:	2140      	movs	r1, #64	@ 0x40
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 faeb 	bl	80036fc <UART_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e006      	b.n	8003146 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2220      	movs	r2, #32
 800313c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b20      	cmp	r3, #32
 8003166:	d112      	bne.n	800318e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <HAL_UART_Receive_IT+0x26>
 800316e:	88fb      	ldrh	r3, [r7, #6]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e00b      	b.n	8003190 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	461a      	mov	r2, r3
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fb12 	bl	80037ae <UART_Start_Receive_IT>
 800318a:	4603      	mov	r3, r0
 800318c:	e000      	b.n	8003190 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800318e:	2302      	movs	r3, #2
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b0ba      	sub	sp, #232	@ 0xe8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d009      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
 80031ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031ee:	f003 0320 	and.w	r3, r3, #32
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fbf2 	bl	80039e0 <UART_Receive_IT>
      return;
 80031fc:	e25b      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80031fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 80de 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
 8003208:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d106      	bne.n	8003222 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003218:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80d1 	beq.w	80033c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
 800322e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003232:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d005      	beq.n	8003246 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323e:	f043 0201 	orr.w	r2, r3, #1
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
 8003252:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f043 0202 	orr.w	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0204 	orr.w	r2, r3, #4
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d011      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
 800329a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d105      	bne.n	80032b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b6:	f043 0208 	orr.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 81f2 	beq.w	80036ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
 80032d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fb7d 	bl	80039e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f0:	2b40      	cmp	r3, #64	@ 0x40
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003302:	f003 0308 	and.w	r3, r3, #8
 8003306:	2b00      	cmp	r3, #0
 8003308:	d103      	bne.n	8003312 <HAL_UART_IRQHandler+0x17a>
 800330a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d04f      	beq.n	80033b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fa85 	bl	8003822 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003322:	2b40      	cmp	r3, #64	@ 0x40
 8003324:	d141      	bne.n	80033aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	3314      	adds	r3, #20
 800332c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003334:	e853 3f00 	ldrex	r3, [r3]
 8003338:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800333c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003340:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003344:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3314      	adds	r3, #20
 800334e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003352:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003356:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800335e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800336a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1d9      	bne.n	8003326 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	2b00      	cmp	r3, #0
 8003378:	d013      	beq.n	80033a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800337e:	4a7e      	ldr	r2, [pc, #504]	@ (8003578 <HAL_UART_IRQHandler+0x3e0>)
 8003380:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe f84d 	bl	8001426 <HAL_DMA_Abort_IT>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800339c:	4610      	mov	r0, r2
 800339e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a0:	e00e      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f994 	bl	80036d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	e00a      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f990 	bl	80036d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b0:	e006      	b.n	80033c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f98c 	bl	80036d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033be:	e175      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	bf00      	nop
    return;
 80033c2:	e173      	b.n	80036ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	f040 814f 	bne.w	800366c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 8148 	beq.w	800366c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f000 8141 	beq.w	800366c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	f040 80b6 	bne.w	800357c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800341c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 8145 	beq.w	80036b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800342a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800342e:	429a      	cmp	r2, r3
 8003430:	f080 813e 	bcs.w	80036b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800343a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003446:	f000 8088 	beq.w	800355a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003460:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003468:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003476:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800347a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003482:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800348e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1d9      	bne.n	800344a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	3314      	adds	r3, #20
 800349c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034a0:	e853 3f00 	ldrex	r3, [r3]
 80034a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3314      	adds	r3, #20
 80034b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034c6:	e841 2300 	strex	r3, r2, [r1]
 80034ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1e1      	bne.n	8003496 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80034e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80034e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3314      	adds	r3, #20
 80034f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80034f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80034f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80034fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003504:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e3      	bne.n	80034d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003528:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	330c      	adds	r3, #12
 8003538:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800353c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800353e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003540:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003542:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003544:	e841 2300 	strex	r3, r2, [r1]
 8003548:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800354a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e3      	bne.n	8003518 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fef6 	bl	8001346 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2202      	movs	r2, #2
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003568:	b29b      	uxth	r3, r3
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	b29b      	uxth	r3, r3
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f8b7 	bl	80036e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003576:	e09b      	b.n	80036b0 <HAL_UART_IRQHandler+0x518>
 8003578:	080038e9 	.word	0x080038e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003584:	b29b      	uxth	r3, r3
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 808e 	beq.w	80036b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8089 	beq.w	80036b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	330c      	adds	r3, #12
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80035c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e3      	bne.n	80035a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	623b      	str	r3, [r7, #32]
   return(result);
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80035fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8003600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003644:	61fa      	str	r2, [r7, #28]
 8003646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	617b      	str	r3, [r7, #20]
   return(result);
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800365e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f83d 	bl	80036e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800366a:	e023      	b.n	80036b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800366c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003674:	2b00      	cmp	r3, #0
 8003676:	d009      	beq.n	800368c <HAL_UART_IRQHandler+0x4f4>
 8003678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f943 	bl	8003910 <UART_Transmit_IT>
    return;
 800368a:	e014      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800368c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <HAL_UART_IRQHandler+0x51e>
 8003698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f983 	bl	80039b0 <UART_EndTransmit_IT>
    return;
 80036aa:	e004      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80036ac:	bf00      	nop
 80036ae:	e002      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036b0:	bf00      	nop
 80036b2:	e000      	b.n	80036b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80036b4:	bf00      	nop
  }
}
 80036b6:	37e8      	adds	r7, #232	@ 0xe8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800370c:	e03b      	b.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003714:	d037      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003716:	f7fd fcd5 	bl	80010c4 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	429a      	cmp	r2, r3
 8003724:	d302      	bcc.n	800372c <UART_WaitOnFlagUntilTimeout+0x30>
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e03a      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d023      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b80      	cmp	r3, #128	@ 0x80
 8003742:	d020      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b40      	cmp	r3, #64	@ 0x40
 8003748:	d01d      	beq.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b08      	cmp	r3, #8
 8003756:	d116      	bne.n	8003786 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	617b      	str	r3, [r7, #20]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	617b      	str	r3, [r7, #20]
 800376c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 f857 	bl	8003822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2208      	movs	r2, #8
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e00f      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4013      	ands	r3, r2
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	bf0c      	ite	eq
 8003796:	2301      	moveq	r3, #1
 8003798:	2300      	movne	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d0b4      	beq.n	800370e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	88fa      	ldrh	r2, [r7, #6]
 80037c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	88fa      	ldrh	r2, [r7, #6]
 80037cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2222      	movs	r2, #34	@ 0x22
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d007      	beq.n	80037f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	695a      	ldr	r2, [r3, #20]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f042 0201 	orr.w	r2, r2, #1
 8003802:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0220 	orr.w	r2, r2, #32
 8003812:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003822:	b480      	push	{r7}
 8003824:	b095      	sub	sp, #84	@ 0x54
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003834:	e853 3f00 	ldrex	r3, [r3]
 8003838:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800384a:	643a      	str	r2, [r7, #64]	@ 0x40
 800384c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003850:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003852:	e841 2300 	strex	r3, r2, [r1]
 8003856:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1e5      	bne.n	800382a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	61fb      	str	r3, [r7, #28]
   return(result);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800387e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003880:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003886:	e841 2300 	strex	r3, r2, [r1]
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800388c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1e5      	bne.n	800385e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	2b01      	cmp	r3, #1
 8003898:	d119      	bne.n	80038ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	330c      	adds	r3, #12
 80038a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f023 0310 	bic.w	r3, r3, #16
 80038b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	330c      	adds	r3, #12
 80038b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038ba:	61ba      	str	r2, [r7, #24]
 80038bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6979      	ldr	r1, [r7, #20]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	613b      	str	r3, [r7, #16]
   return(result);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e5      	bne.n	800389a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038dc:	bf00      	nop
 80038de:	3754      	adds	r7, #84	@ 0x54
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fee4 	bl	80036d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b21      	cmp	r3, #33	@ 0x21
 8003922:	d13e      	bne.n	80039a2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392c:	d114      	bne.n	8003958 <UART_Transmit_IT+0x48>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d110      	bne.n	8003958 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800394a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	621a      	str	r2, [r3, #32]
 8003956:	e008      	b.n	800396a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	1c59      	adds	r1, r3, #1
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6211      	str	r1, [r2, #32]
 8003962:	781a      	ldrb	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800396e:	b29b      	uxth	r3, r3
 8003970:	3b01      	subs	r3, #1
 8003972:	b29b      	uxth	r3, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4619      	mov	r1, r3
 8003978:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800398c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800399c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800399e:	2300      	movs	r3, #0
 80039a0:	e000      	b.n	80039a4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039a2:	2302      	movs	r3, #2
  }
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fe73 	bl	80036bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08c      	sub	sp, #48	@ 0x30
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b22      	cmp	r3, #34	@ 0x22
 80039f2:	f040 80ae 	bne.w	8003b52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fe:	d117      	bne.n	8003a30 <UART_Receive_IT+0x50>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d113      	bne.n	8003a30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a10:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a28:	1c9a      	adds	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a2e:	e026      	b.n	8003a7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a42:	d007      	beq.n	8003a54 <UART_Receive_IT+0x74>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10a      	bne.n	8003a62 <UART_Receive_IT+0x82>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d106      	bne.n	8003a62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e008      	b.n	8003a74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d15d      	bne.n	8003b4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0220 	bic.w	r2, r2, #32
 8003aa0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ab0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695a      	ldr	r2, [r3, #20]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0201 	bic.w	r2, r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d135      	bne.n	8003b44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	e853 3f00 	ldrex	r3, [r3]
 8003aec:	613b      	str	r3, [r7, #16]
   return(result);
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f023 0310 	bic.w	r3, r3, #16
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003afe:	623a      	str	r2, [r7, #32]
 8003b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	69f9      	ldr	r1, [r7, #28]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e5      	bne.n	8003ade <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	2b10      	cmp	r3, #16
 8003b1e:	d10a      	bne.n	8003b36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fdd1 	bl	80036e4 <HAL_UARTEx_RxEventCallback>
 8003b42:	e002      	b.n	8003b4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7fc ff77 	bl	8000a38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	e002      	b.n	8003b54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3730      	adds	r7, #48	@ 0x30
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b60:	b0c0      	sub	sp, #256	@ 0x100
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	68d9      	ldr	r1, [r3, #12]
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	ea40 0301 	orr.w	r3, r0, r1
 8003b84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	69db      	ldr	r3, [r3, #28]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bb4:	f021 010c 	bic.w	r1, r1, #12
 8003bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bc2:	430b      	orrs	r3, r1
 8003bc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd6:	6999      	ldr	r1, [r3, #24]
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	ea40 0301 	orr.w	r3, r0, r1
 8003be2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b8f      	ldr	r3, [pc, #572]	@ (8003e28 <UART_SetConfig+0x2cc>)
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d005      	beq.n	8003bfc <UART_SetConfig+0xa0>
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4b8d      	ldr	r3, [pc, #564]	@ (8003e2c <UART_SetConfig+0x2d0>)
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d104      	bne.n	8003c06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bfc:	f7fe fbe6 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8003c00:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c04:	e003      	b.n	8003c0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c06:	f7fe fbcd 	bl	80023a4 <HAL_RCC_GetPCLK1Freq>
 8003c0a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c18:	f040 810c 	bne.w	8003e34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c20:	2200      	movs	r2, #0
 8003c22:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c26:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c2e:	4622      	mov	r2, r4
 8003c30:	462b      	mov	r3, r5
 8003c32:	1891      	adds	r1, r2, r2
 8003c34:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c36:	415b      	adcs	r3, r3
 8003c38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c3e:	4621      	mov	r1, r4
 8003c40:	eb12 0801 	adds.w	r8, r2, r1
 8003c44:	4629      	mov	r1, r5
 8003c46:	eb43 0901 	adc.w	r9, r3, r1
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5e:	4690      	mov	r8, r2
 8003c60:	4699      	mov	r9, r3
 8003c62:	4623      	mov	r3, r4
 8003c64:	eb18 0303 	adds.w	r3, r8, r3
 8003c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c6c:	462b      	mov	r3, r5
 8003c6e:	eb49 0303 	adc.w	r3, r9, r3
 8003c72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c82:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	18db      	adds	r3, r3, r3
 8003c8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c90:	4613      	mov	r3, r2
 8003c92:	eb42 0303 	adc.w	r3, r2, r3
 8003c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ca0:	f7fc fa92 	bl	80001c8 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003caa:	fba3 2302 	umull	r2, r3, r3, r2
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	011c      	lsls	r4, r3, #4
 8003cb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cbc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cc4:	4642      	mov	r2, r8
 8003cc6:	464b      	mov	r3, r9
 8003cc8:	1891      	adds	r1, r2, r2
 8003cca:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ccc:	415b      	adcs	r3, r3
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	eb12 0a01 	adds.w	sl, r2, r1
 8003cda:	4649      	mov	r1, r9
 8003cdc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf4:	4692      	mov	sl, r2
 8003cf6:	469b      	mov	fp, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	eb1a 0303 	adds.w	r3, sl, r3
 8003cfe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d02:	464b      	mov	r3, r9
 8003d04:	eb4b 0303 	adc.w	r3, fp, r3
 8003d08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d20:	460b      	mov	r3, r1
 8003d22:	18db      	adds	r3, r3, r3
 8003d24:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d26:	4613      	mov	r3, r2
 8003d28:	eb42 0303 	adc.w	r3, r2, r3
 8003d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d36:	f7fc fa47 	bl	80001c8 <__aeabi_uldivmod>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	4b3b      	ldr	r3, [pc, #236]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003d42:	fba3 2301 	umull	r2, r3, r3, r1
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	2264      	movs	r2, #100	@ 0x64
 8003d4a:	fb02 f303 	mul.w	r3, r2, r3
 8003d4e:	1acb      	subs	r3, r1, r3
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d56:	4b36      	ldr	r3, [pc, #216]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003d58:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d64:	441c      	add	r4, r3
 8003d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d78:	4642      	mov	r2, r8
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	1891      	adds	r1, r2, r2
 8003d7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d80:	415b      	adcs	r3, r3
 8003d82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d88:	4641      	mov	r1, r8
 8003d8a:	1851      	adds	r1, r2, r1
 8003d8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d8e:	4649      	mov	r1, r9
 8003d90:	414b      	adcs	r3, r1
 8003d92:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d94:	f04f 0200 	mov.w	r2, #0
 8003d98:	f04f 0300 	mov.w	r3, #0
 8003d9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003da0:	4659      	mov	r1, fp
 8003da2:	00cb      	lsls	r3, r1, #3
 8003da4:	4651      	mov	r1, sl
 8003da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003daa:	4651      	mov	r1, sl
 8003dac:	00ca      	lsls	r2, r1, #3
 8003dae:	4610      	mov	r0, r2
 8003db0:	4619      	mov	r1, r3
 8003db2:	4603      	mov	r3, r0
 8003db4:	4642      	mov	r2, r8
 8003db6:	189b      	adds	r3, r3, r2
 8003db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dbc:	464b      	mov	r3, r9
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	eb42 0303 	adc.w	r3, r2, r3
 8003dc4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dd4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ddc:	460b      	mov	r3, r1
 8003dde:	18db      	adds	r3, r3, r3
 8003de0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003de2:	4613      	mov	r3, r2
 8003de4:	eb42 0303 	adc.w	r3, r2, r3
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003df2:	f7fc f9e9 	bl	80001c8 <__aeabi_uldivmod>
 8003df6:	4602      	mov	r2, r0
 8003df8:	460b      	mov	r3, r1
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003dfc:	fba3 1302 	umull	r1, r3, r3, r2
 8003e00:	095b      	lsrs	r3, r3, #5
 8003e02:	2164      	movs	r1, #100	@ 0x64
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	3332      	adds	r3, #50	@ 0x32
 8003e0e:	4a08      	ldr	r2, [pc, #32]	@ (8003e30 <UART_SetConfig+0x2d4>)
 8003e10:	fba2 2303 	umull	r2, r3, r2, r3
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	f003 0207 	and.w	r2, r3, #7
 8003e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4422      	add	r2, r4
 8003e22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e24:	e106      	b.n	8004034 <UART_SetConfig+0x4d8>
 8003e26:	bf00      	nop
 8003e28:	40011000 	.word	0x40011000
 8003e2c:	40011400 	.word	0x40011400
 8003e30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e46:	4642      	mov	r2, r8
 8003e48:	464b      	mov	r3, r9
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	6239      	str	r1, [r7, #32]
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	4641      	mov	r1, r8
 8003e58:	1854      	adds	r4, r2, r1
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	eb43 0501 	adc.w	r5, r3, r1
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	00eb      	lsls	r3, r5, #3
 8003e6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6e:	00e2      	lsls	r2, r4, #3
 8003e70:	4614      	mov	r4, r2
 8003e72:	461d      	mov	r5, r3
 8003e74:	4643      	mov	r3, r8
 8003e76:	18e3      	adds	r3, r4, r3
 8003e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e7c:	464b      	mov	r3, r9
 8003e7e:	eb45 0303 	adc.w	r3, r5, r3
 8003e82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	008b      	lsls	r3, r1, #2
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eac:	4621      	mov	r1, r4
 8003eae:	008a      	lsls	r2, r1, #2
 8003eb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eb4:	f7fc f988 	bl	80001c8 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4b60      	ldr	r3, [pc, #384]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec2:	095b      	lsrs	r3, r3, #5
 8003ec4:	011c      	lsls	r4, r3, #4
 8003ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ed0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ed4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed8:	4642      	mov	r2, r8
 8003eda:	464b      	mov	r3, r9
 8003edc:	1891      	adds	r1, r2, r2
 8003ede:	61b9      	str	r1, [r7, #24]
 8003ee0:	415b      	adcs	r3, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
 8003ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee8:	4641      	mov	r1, r8
 8003eea:	1851      	adds	r1, r2, r1
 8003eec:	6139      	str	r1, [r7, #16]
 8003eee:	4649      	mov	r1, r9
 8003ef0:	414b      	adcs	r3, r1
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f00:	4659      	mov	r1, fp
 8003f02:	00cb      	lsls	r3, r1, #3
 8003f04:	4651      	mov	r1, sl
 8003f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f0a:	4651      	mov	r1, sl
 8003f0c:	00ca      	lsls	r2, r1, #3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	4619      	mov	r1, r3
 8003f12:	4603      	mov	r3, r0
 8003f14:	4642      	mov	r2, r8
 8003f16:	189b      	adds	r3, r3, r2
 8003f18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f1c:	464b      	mov	r3, r9
 8003f1e:	460a      	mov	r2, r1
 8003f20:	eb42 0303 	adc.w	r3, r2, r3
 8003f24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f40:	4649      	mov	r1, r9
 8003f42:	008b      	lsls	r3, r1, #2
 8003f44:	4641      	mov	r1, r8
 8003f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	008a      	lsls	r2, r1, #2
 8003f4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f52:	f7fc f939 	bl	80001c8 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4611      	mov	r1, r2
 8003f5c:	4b38      	ldr	r3, [pc, #224]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2264      	movs	r2, #100	@ 0x64
 8003f66:	fb02 f303 	mul.w	r3, r2, r3
 8003f6a:	1acb      	subs	r3, r1, r3
 8003f6c:	011b      	lsls	r3, r3, #4
 8003f6e:	3332      	adds	r3, #50	@ 0x32
 8003f70:	4a33      	ldr	r2, [pc, #204]	@ (8004040 <UART_SetConfig+0x4e4>)
 8003f72:	fba2 2303 	umull	r2, r3, r2, r3
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f7c:	441c      	add	r4, r3
 8003f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f82:	2200      	movs	r2, #0
 8003f84:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f86:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	1891      	adds	r1, r2, r2
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	415b      	adcs	r3, r3
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	1851      	adds	r1, r2, r1
 8003fa0:	6039      	str	r1, [r7, #0]
 8003fa2:	4649      	mov	r1, r9
 8003fa4:	414b      	adcs	r3, r1
 8003fa6:	607b      	str	r3, [r7, #4]
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fb4:	4659      	mov	r1, fp
 8003fb6:	00cb      	lsls	r3, r1, #3
 8003fb8:	4651      	mov	r1, sl
 8003fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fbe:	4651      	mov	r1, sl
 8003fc0:	00ca      	lsls	r2, r1, #3
 8003fc2:	4610      	mov	r0, r2
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4642      	mov	r2, r8
 8003fca:	189b      	adds	r3, r3, r2
 8003fcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fce:	464b      	mov	r3, r9
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	eb42 0303 	adc.w	r3, r2, r3
 8003fd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fe2:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	008b      	lsls	r3, r1, #2
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	008a      	lsls	r2, r1, #2
 8003ffe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004002:	f7fc f8e1 	bl	80001c8 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4b0d      	ldr	r3, [pc, #52]	@ (8004040 <UART_SetConfig+0x4e4>)
 800400c:	fba3 1302 	umull	r1, r3, r3, r2
 8004010:	095b      	lsrs	r3, r3, #5
 8004012:	2164      	movs	r1, #100	@ 0x64
 8004014:	fb01 f303 	mul.w	r3, r1, r3
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	3332      	adds	r3, #50	@ 0x32
 800401e:	4a08      	ldr	r2, [pc, #32]	@ (8004040 <UART_SetConfig+0x4e4>)
 8004020:	fba2 2303 	umull	r2, r3, r2, r3
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	f003 020f 	and.w	r2, r3, #15
 800402a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4422      	add	r2, r4
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004040:	51eb851f 	.word	0x51eb851f

08004044 <memset>:
 8004044:	4402      	add	r2, r0
 8004046:	4603      	mov	r3, r0
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	f803 1b01 	strb.w	r1, [r3], #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	4d0d      	ldr	r5, [pc, #52]	@ (800408c <__libc_init_array+0x38>)
 8004058:	4c0d      	ldr	r4, [pc, #52]	@ (8004090 <__libc_init_array+0x3c>)
 800405a:	1b64      	subs	r4, r4, r5
 800405c:	10a4      	asrs	r4, r4, #2
 800405e:	2600      	movs	r6, #0
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	4d0b      	ldr	r5, [pc, #44]	@ (8004094 <__libc_init_array+0x40>)
 8004066:	4c0c      	ldr	r4, [pc, #48]	@ (8004098 <__libc_init_array+0x44>)
 8004068:	f000 f818 	bl	800409c <_init>
 800406c:	1b64      	subs	r4, r4, r5
 800406e:	10a4      	asrs	r4, r4, #2
 8004070:	2600      	movs	r6, #0
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	f855 3b04 	ldr.w	r3, [r5], #4
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	f855 3b04 	ldr.w	r3, [r5], #4
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	08004134 	.word	0x08004134
 8004090:	08004134 	.word	0x08004134
 8004094:	08004134 	.word	0x08004134
 8004098:	08004138 	.word	0x08004138

0800409c <_init>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr

080040a8 <_fini>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr
